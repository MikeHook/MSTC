<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GoCardless</name>
    </assembly>
    <members>
        <member name="P:GoCardless.Errors.ApiError.Message">
            <summary>
            Returns a short message describing the error.
            </summary>
        </member>
        <member name="P:GoCardless.Errors.ApiError.DocumentationUrl">
            <summary>
            Returns the URL to the documentation describing the error.
            </summary>
        </member>
        <member name="P:GoCardless.Errors.ApiError.Type">
            <summary>
            Returns the type of the error.
            </summary>
        </member>
        <member name="P:GoCardless.Errors.ApiError.RequestId">
            <summary>
            Returns the ID of the request.  This can be used to help the support
            team find your error quickly.
            </summary>
        </member>
        <member name="P:GoCardless.Errors.ApiError.Code">
            <summary>
            Returns the HTTP status code.
            </summary>
        </member>
        <member name="P:GoCardless.Errors.ApiError.Errors">
            <summary>
            Returns a list of errors.
            </summary>
        </member>
        <member name="P:GoCardless.Errors.ApiErrorResponse.Error">
            <summary>An ApiError object representing the details of the error.</summary>
        </member>
        <member name="T:GoCardless.Errors.ApiErrorType">
            <summary>
            Types of error that can be returned by the API.
            </summary>
        </member>
        <member name="F:GoCardless.Errors.ApiErrorType.GOCARDLESS">
            <summary>
            An internal error occurred while processing your request. This should be
            reported to our support team with the id, so we can resolve the issue.
            </summary>
        </member>
        <member name="F:GoCardless.Errors.ApiErrorType.INVALID_API_USAGE">
            <summary>
            This is an error with the request you made. It could be an invalid URL, the
            authentication header could be missing, invalid, or grant insufficient
            permissions, you may have reached your rate limit, or the syntax of your
            request could be incorrect. The errors will give more detail of the specific
            issue.
            </summary>
        </member>
        <member name="F:GoCardless.Errors.ApiErrorType.INVALID_STATE">
            <summary>
            The action you are trying to perform is invalid due to the state of the
            resource you are requesting it on. For example, a payment you are trying to
            cancel might already have been submitted. The errors will give more details.
            </summary>
        </member>
        <member name="F:GoCardless.Errors.ApiErrorType.VALIDATION_FAILED">
            <summary>
            The parameters submitted with your request were invalid. Details of which
            fields were invalid and why are included in the response.
            </summary>
        </member>
        <member name="T:GoCardless.Errors.Error">
            <summary>
            An individual error object from an error response.
            See https://developer.gocardless.com/api-reference/#api-usage-errors
            </summary>
        </member>
        <member name="P:GoCardless.Errors.Error.Reason">
            <summary>
            Returns a key defining the cause of the error.
            </summary>
        </member>
        <member name="P:GoCardless.Errors.Error.Message">
            <summary>
            Returns a short message describing the error.
            </summary>
        </member>
        <member name="P:GoCardless.Errors.Error.Links">
            <summary>
            Returns a dictionary of resources linked to the error.
            </summary>
        </member>
        <member name="P:GoCardless.Errors.Error.Field">
            <summary>
            For validation errors, returns the invalid field name.
            </summary>
        </member>
        <member name="P:GoCardless.Errors.Error.RequestPointer">
            <summary>
            A JSON pointer for a validation error.
            </summary>
        </member>
        <member name="T:GoCardless.Errors.Error.IError">
            <summary>
            An API error
            </summary>
        </member>
        <member name="P:GoCardless.Errors.Error.IError.Reason">
            <summary>
            Returns a key defining the cause of the error.
            </summary>
        </member>
        <member name="P:GoCardless.Errors.Error.IError.Message">
            <summary>
            Returns a short message describing the error.
            </summary>
        </member>
        <member name="P:GoCardless.Errors.Error.IError.Links">
            <summary>
            Returns a dictionary of resources linked to the error.
            </summary>
        </member>
        <member name="T:GoCardless.Errors.Error.IValidationError">
            <summary>
            A validation error
            </summary>
        </member>
        <member name="P:GoCardless.Errors.Error.IValidationError.Field">
            <summary>
            Returns the invalid field name.
            </summary>
        </member>
        <member name="P:GoCardless.Errors.Error.IValidationError.Message">
            <summary>
            Returns a short message describing the error.
            </summary>
        </member>
        <member name="P:GoCardless.Errors.Error.IValidationError.RequestPointer">
            <summary>
            A JSON pointer for a validation error.
            </summary>
        </member>
        <member name="T:GoCardless.Exceptions.ApiException">
             <summary>
            Base class for exceptions that are thrown as a result of error responses from
            the API.
             </summary>
        </member>
        <member name="P:GoCardless.Exceptions.ApiException.Type">
             <summary>
            Returns the type of the error.
             </summary>
        </member>
        <member name="P:GoCardless.Exceptions.ApiException.DocumentationUrl">
             <summary>
            Returns the URL to the documentation describing the error.
             </summary>
        </member>
        <member name="P:GoCardless.Exceptions.ApiException.RequestId">
             <summary>
            Returns the ID of the request.  This can be used to help the support
            team find your error quickly.
             </summary>
        </member>
        <member name="P:GoCardless.Exceptions.ApiException.Code">
             <summary>
            Returns the HTTP status code.
             </summary>
        </member>
        <member name="P:GoCardless.Exceptions.ApiException.Errors">
             <summary>
            Returns a list of errors.
             </summary>
        </member>
        <member name="T:GoCardless.Exceptions.ErrorMapperExtension">
             <summary>
            Provides a mapping between API error responses and exceptions.  Users of this
            library will not need to use this class.
             </summary>
        </member>
        <member name="M:GoCardless.Exceptions.ErrorMapperExtension.ToException(GoCardless.Errors.ApiErrorResponse)">
             <summary>
            Maps an error response to an exception.
            @param error the error response to map
             </summary>
        </member>
        <member name="T:GoCardless.Exceptions.InternalException">
             <summary>
            Exception thrown when an internal error occurred while processing your request.
             </summary>
        </member>
        <member name="T:GoCardless.Exceptions.InvalidApiUsageException">
             <summary>
            Exception thrown when there is an error with the request you made.
             </summary>
        </member>
        <member name="T:GoCardless.Exceptions.InvalidStateException">
             <summary>
            Exception thrown when the action you are trying to perform is invalid due to
            the state of the resource you are requesting it on.
             </summary>
        </member>
        <member name="T:GoCardless.Exceptions.ValidationFailedException">
             <summary>
            Exception thrown when the parameters submitted with your request were invalid.
             </summary>
        </member>
        <member name="T:GoCardless.GoCardlessClient">
             <summary>
            Entry point into the client.
             </summary>
        </member>
        <member name="P:GoCardless.GoCardlessClient.DefaultHttpClient">
            <summary>
            This is the singleton HttpClient used if none is passed in via the .Create factory methods.
            See https://msdn.microsoft.com/en-us/library/system.net.http.httpclient(v=vs.110).aspx#Anchor_5
            </summary>
        </member>
        <member name="T:GoCardless.GoCardlessClient.Environment">
             <summary>
            Available environments for this client.
             </summary>
        </member>
        <member name="F:GoCardless.GoCardlessClient.Environment.LIVE">
             <summary>
            Live environment (base URL https://api.gocardless.com).
             </summary>
        </member>
        <member name="F:GoCardless.GoCardlessClient.Environment.SANDBOX">
             <summary>
            Sandbox environment (base URL https://api-sandbox.gocardless.com).
             </summary>
        </member>
        <member name="M:GoCardless.GoCardlessClient.Create(System.String)">
             <summary>
            Creates an instance of the client in the live environment.
            
            @param accessToken the access token
             </summary>
        </member>
        <member name="M:GoCardless.GoCardlessClient.Create(System.String,GoCardless.GoCardlessClient.Environment,System.Net.Http.HttpClient)">
             <summary>
            Creates an instance of the client in a specified environment.
            
            @param accessToken the access token
            @param environment the environment
             </summary>
        </member>
        <member name="M:GoCardless.GoCardlessClient.Create(System.String,System.String,System.Net.Http.HttpClient)">
             <summary>
            Creates an instance of the client running against a custom URL.
            
            @param accessToken the access token
            @param baseUrl the base URL of the API
             </summary>
        </member>
        <member name="P:GoCardless.GoCardlessClient.BankDetailsLookups">
             <summary>
            A service for working with bank details lookup resources.
             </summary>
        </member>
        <member name="P:GoCardless.GoCardlessClient.Creditors">
             <summary>
            A service for working with creditor resources.
             </summary>
        </member>
        <member name="P:GoCardless.GoCardlessClient.CreditorBankAccounts">
             <summary>
            A service for working with creditor bank account resources.
             </summary>
        </member>
        <member name="P:GoCardless.GoCardlessClient.Customers">
             <summary>
            A service for working with customer resources.
             </summary>
        </member>
        <member name="P:GoCardless.GoCardlessClient.CustomerBankAccounts">
             <summary>
            A service for working with customer bank account resources.
             </summary>
        </member>
        <member name="P:GoCardless.GoCardlessClient.Events">
             <summary>
            A service for working with event resources.
             </summary>
        </member>
        <member name="P:GoCardless.GoCardlessClient.Mandates">
             <summary>
            A service for working with mandate resources.
             </summary>
        </member>
        <member name="P:GoCardless.GoCardlessClient.MandatePdfs">
             <summary>
            A service for working with mandate pdf resources.
             </summary>
        </member>
        <member name="P:GoCardless.GoCardlessClient.Payments">
             <summary>
            A service for working with payment resources.
             </summary>
        </member>
        <member name="P:GoCardless.GoCardlessClient.Payouts">
             <summary>
            A service for working with payout resources.
             </summary>
        </member>
        <member name="P:GoCardless.GoCardlessClient.RedirectFlows">
             <summary>
            A service for working with redirect flow resources.
             </summary>
        </member>
        <member name="P:GoCardless.GoCardlessClient.Refunds">
             <summary>
            A service for working with refund resources.
             </summary>
        </member>
        <member name="P:GoCardless.GoCardlessClient.Subscriptions">
             <summary>
            A service for working with subscription resources.
             </summary>
        </member>
        <member name="T:GoCardless.GoCardlessException">
             <summary>
            Base class for client library exceptions.
             </summary>
        </member>
        <member name="P:GoCardless.Internals.RequestSettings.CustomiseRequestMessage">
            <summary>
            Use this to customise the HttpRequestMessage before it is sent to GoCardless
            </summary>
        </member>
        <member name="P:GoCardless.Internals.RequestSettings.NumberOfRetriesOnTimeout">
            <summary>
            How many retries to attempt when the request to GoCardless has timed out. If not set,
            the value from GoCardlessClient.DefaultNumberOfRetriesOnTimeout will be used, which is set to
            3 but can be changed
            </summary>
        </member>
        <member name="P:GoCardless.Internals.RequestSettings.WaitBetweenRetries">
            <summary>
            How long to wait between retries when the request to GoCardless has timed out. If not set,
            the value from GoCardlessClient.DefaultWaitBetweenRetries will be used, which is set to
            0.5 seconds but can be changed
            </summary>
        </member>
        <member name="T:GoCardless.Resources.BankDetailsLookup">
             <summary>
             Represents a bank details lookup resource.
            
             Look up the name and reachability of a bank.
             </summary>
        </member>
        <member name="P:GoCardless.Resources.BankDetailsLookup.AvailableDebitSchemes">
            <summary>
            Array of [schemes](#mandates_scheme) supported for this bank
            account. This will be an empty array if the bank account is not
            reachable by any schemes.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.BankDetailsLookup.BankName">
            <summary>
            The name of the bank with which the account is held (if available).
            </summary>
        </member>
        <member name="P:GoCardless.Resources.BankDetailsLookup.Bic">
            <summary>
            ISO 9362 SWIFT BIC of the bank with which the account is held.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.BankDetailsLookupAvailableDebitScheme">
            <summary>
            A Direct Debit scheme for this bank account.
            </summary>
        </member>
        <member name="F:GoCardless.Resources.BankDetailsLookupAvailableDebitScheme.Autogiro">
            <summary>`available_debit_scheme` with a value of "autogiro"</summary>
        </member>
        <member name="F:GoCardless.Resources.BankDetailsLookupAvailableDebitScheme.Bacs">
            <summary>`available_debit_scheme` with a value of "bacs"</summary>
        </member>
        <member name="F:GoCardless.Resources.BankDetailsLookupAvailableDebitScheme.SepaCore">
            <summary>`available_debit_scheme` with a value of "sepa_core"</summary>
        </member>
        <member name="T:GoCardless.Resources.Creditor">
             <summary>
             Represents a creditor resource.
            
             Each [payment](#core-endpoints-payments) taken through the API is linked
             to a "creditor", to whom the payment is then paid out. In most cases
             your organisation will have a single "creditor", but the API also
             supports collecting payments on behalf of others.
             
             Please get in touch if you wish to use this endpoint. Currently, for
             Anti Money Laundering reasons, any creditors you add must be directly
             related to your organisation.
             </summary>
        </member>
        <member name="P:GoCardless.Resources.Creditor.AddressLine1">
            <summary>
            The first line of the creditor's address.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Creditor.AddressLine2">
            <summary>
            The second line of the creditor's address.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Creditor.AddressLine3">
            <summary>
            The third line of the creditor's address.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Creditor.City">
            <summary>
            The city of the creditor's address.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Creditor.CountryCode">
            <summary>
            [ISO
            3166-1](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)
            alpha-2 code.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Creditor.CreatedAt">
            <summary>
            Fixed [timestamp](#api-usage-time-zones--dates), recording when this
            resource was created.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Creditor.Id">
            <summary>
            Unique identifier, beginning with "CR".
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Creditor.Links">
            <summary>
            Resources linked to this Creditor.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Creditor.LogoUrl">
            <summary>
            URL for the creditor's logo, which may be shown on their payment
            pages.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Creditor.Name">
            <summary>
            The creditor's name.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Creditor.PostalCode">
            <summary>
            The creditor's postal code.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Creditor.Region">
            <summary>
            The creditor's address region, county or department.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Creditor.SchemeIdentifiers">
            <summary>
            An array of the scheme identifiers this creditor can create mandates
            against.
            
            The support address, `phone_number` and `email` fields are for
            customers to contact the merchant for support purposes. They must be
            displayed on the payment page, please see our [compliance
            requirements](#appendix-compliance-requirements) for more details.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Creditor.VerificationStatus">
            <summary>
            The creditor's verification status, indicating whether they can yet
            receive payouts. For more details on handling verification as a
            partner, see our ["Helping your users get verified"
            guide](/getting-started/partners/helping-your-users-get-verified/).
            One of:
            <ul>
            <li>`successful`: The creditor's account is fully verified, and they
            can receive payouts. Once a creditor has been successfully verified,
            they may in the future require further verification - for example,
            if they change their payout bank account, we will have to check that
            they own the new bank account before they can receive payouts
            again.</li>
            <li>`in_review`: The creditor has provided all of the information
            currently requested, and it is awaiting review by GoCardless before
            they can be verified and receive payouts.</li>
            <li>`action_required`: The creditor needs to provide further
            information to verify their account so they can receive payouts, and
            should visit the verification flow.</li>
            </ul>
            </summary>
        </member>
        <member name="T:GoCardless.Resources.CreditorLinks">
            <summary>
            Resources linked to this Creditor
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorLinks.DefaultEurPayoutAccount">
            <summary>
            ID of the [bank account](#core-endpoints-creditor-bank-accounts)
            which is set up to receive payouts in EUR.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorLinks.DefaultGbpPayoutAccount">
            <summary>
            ID of the [bank account](#core-endpoints-creditor-bank-accounts)
            which is set up to receive payouts in GBP.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorLinks.DefaultSekPayoutAccount">
            <summary>
            ID of the [bank account](#core-endpoints-creditor-bank-accounts)
            which is set up to receive payouts in SEK.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.CreditorSchemeIdentifier">
            <summary>
            An array of the scheme identifiers this creditor can create mandates
            against.
            
            The support address, `phone_number` and `email` fields are for customers
            to contact the merchant for support purposes. They must be displayed on
            the payment page, please see our [compliance
            requirements](#appendix-compliance-requirements) for more details.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorSchemeIdentifier.AddressLine1">
            <summary>
            The first line of the support address.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorSchemeIdentifier.AddressLine2">
            <summary>
            The second line of the support address.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorSchemeIdentifier.AddressLine3">
            <summary>
            The third line of the support address.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorSchemeIdentifier.CanSpecifyMandateReference">
            <summary>
            Whether a custom reference can be submitted for mandates using this
            scheme identifier.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorSchemeIdentifier.City">
            <summary>
            The city of the support address.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorSchemeIdentifier.CountryCode">
            <summary>
            The support [ISO 3166-1 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements).
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorSchemeIdentifier.Currency">
            <summary>
            The currency of the scheme identifier.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorSchemeIdentifier.Email">
            <summary>
            The support email address.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorSchemeIdentifier.MinimumAdvanceNotice">
            <summary>
            The minimum interval, in working days, between the sending of a
            pre-notification to the customer, and the charge date of a payment
            using this scheme identifier.
            
            By default, GoCardless sends these notifications automatically.
            Please see our [compliance
            requirements](#appendix-compliance-requirements) for more details.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorSchemeIdentifier.Name">
            <summary>
            The name which appears on customers' bank statements.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorSchemeIdentifier.PhoneNumber">
            <summary>
            The support phone number.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorSchemeIdentifier.PostalCode">
            <summary>
            The support postal code.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorSchemeIdentifier.Reference">
            <summary>
            The scheme-unique identifier against which payments are submitted.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorSchemeIdentifier.Region">
            <summary>
            The support address region, county or department.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorSchemeIdentifier.Scheme">
            <summary>
            The scheme which this scheme identifier applies to.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.CreditorSchemeIdentifierCurrency">
            <summary>
            The currency of the scheme identifier.
            </summary>
        </member>
        <member name="F:GoCardless.Resources.CreditorSchemeIdentifierCurrency.GBP">
            <summary>`currency` with a value of "GBP"</summary>
        </member>
        <member name="F:GoCardless.Resources.CreditorSchemeIdentifierCurrency.EUR">
            <summary>`currency` with a value of "EUR"</summary>
        </member>
        <member name="F:GoCardless.Resources.CreditorSchemeIdentifierCurrency.SEK">
            <summary>`currency` with a value of "SEK"</summary>
        </member>
        <member name="T:GoCardless.Resources.CreditorSchemeIdentifierScheme">
            <summary>
            The scheme which this scheme identifier applies to.
            </summary>
        </member>
        <member name="F:GoCardless.Resources.CreditorSchemeIdentifierScheme.Bacs">
            <summary>`scheme` with a value of "bacs"</summary>
        </member>
        <member name="F:GoCardless.Resources.CreditorSchemeIdentifierScheme.Sepa">
            <summary>`scheme` with a value of "sepa"</summary>
        </member>
        <member name="F:GoCardless.Resources.CreditorSchemeIdentifierScheme.Autogiro">
            <summary>`scheme` with a value of "autogiro"</summary>
        </member>
        <member name="T:GoCardless.Resources.CreditorVerificationStatus">
            <summary>
            The creditor's verification status, indicating whether they can yet receive payouts. For
            more details on handling verification as a partner, see our ["Helping your users get
            verified" guide](/getting-started/partners/helping-your-users-get-verified/). One of:
            <ul>
            <li>`successful`: The creditor's account is fully verified, and they can receive payouts.
            Once a creditor has been successfully verified, they may in the future require further
            verification - for example, if they change their payout bank account, we will have to check
            that they own the new bank account before they can receive payouts again.</li>
            <li>`in_review`: The creditor has provided all of the information currently requested, and
            it is awaiting review by GoCardless before they can be verified and receive payouts.</li>
            <li>`action_required`: The creditor needs to provide further information to verify their
            account so they can receive payouts, and should visit the verification flow.</li>
            </ul>
            </summary>
        </member>
        <member name="F:GoCardless.Resources.CreditorVerificationStatus.Successful">
            <summary>`verification_status` with a value of "successful"</summary>
        </member>
        <member name="F:GoCardless.Resources.CreditorVerificationStatus.InReview">
            <summary>`verification_status` with a value of "in_review"</summary>
        </member>
        <member name="F:GoCardless.Resources.CreditorVerificationStatus.ActionRequired">
            <summary>`verification_status` with a value of "action_required"</summary>
        </member>
        <member name="T:GoCardless.Resources.CreditorBankAccount">
             <summary>
             Represents a creditor bank account resource.
            
             Creditor Bank Accounts hold the bank details of a
             [creditor](#core-endpoints-creditors). These are the bank accounts which
             your [payouts](#core-endpoints-payouts) will be sent to.
             
             Note that creditor bank accounts must be unique, and so you will
             encounter a `bank_account_exists` error if you try to create a duplicate
             bank account. You may wish to handle this by updating the existing
             record instead, the ID of which will be provided as
             `links[creditor_bank_account]` in the error response.
             </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorBankAccount.AccountHolderName">
            <summary>
            Name of the account holder, as known by the bank. Usually this is
            the same as the name stored with the linked
            [creditor](#core-endpoints-creditors). This field will be
            transliterated, upcased and truncated to 18 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorBankAccount.AccountNumberEnding">
            <summary>
            Last two digits of account number.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorBankAccount.BankName">
            <summary>
            Name of bank, taken from the bank details.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorBankAccount.CountryCode">
            <summary>
            [ISO
            3166-1](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)
            alpha-2 code. Defaults to the country code of the `iban` if
            supplied, otherwise is required.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorBankAccount.CreatedAt">
            <summary>
            Fixed [timestamp](#api-usage-time-zones--dates), recording when this
            resource was created.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorBankAccount.Currency">
            <summary>
            [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217#Active_codes)
            currency code, defaults to national currency of `country_code`.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorBankAccount.Enabled">
            <summary>
            Boolean value showing whether the bank account is enabled or
            disabled.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorBankAccount.Id">
            <summary>
            Unique identifier, beginning with "BA".
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorBankAccount.Links">
            <summary>
            Resources linked to this CreditorBankAccount.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorBankAccount.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.CreditorBankAccountLinks">
            <summary>
            Resources linked to this CreditorBankAccount
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CreditorBankAccountLinks.Creditor">
            <summary>
            ID of the [creditor](#core-endpoints-creditors) that owns this bank
            account.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.Customer">
             <summary>
             Represents a customer resource.
            
             Customer objects hold the contact details for a customer. A customer can
             have several [customer bank
             accounts](#core-endpoints-customer-bank-accounts), which in turn can
             have several Direct Debit [mandates](#core-endpoints-mandates).
             
             Note: the `swedish_identity_number` field may only be supplied for
             Swedish customers, and must be supplied if you intend to set up an
             Autogiro mandate with the customer.
             </summary>
        </member>
        <member name="P:GoCardless.Resources.Customer.AddressLine1">
            <summary>
            The first line of the customer's address.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Customer.AddressLine2">
            <summary>
            The second line of the customer's address.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Customer.AddressLine3">
            <summary>
            The third line of the customer's address.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Customer.City">
            <summary>
            The city of the customer's address.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Customer.CompanyName">
            <summary>
            Customer's company name. Required unless a `given_name` and
            `family_name` are provided.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Customer.CountryCode">
            <summary>
            [ISO
            3166-1](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)
            alpha-2 code.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Customer.CreatedAt">
            <summary>
            Fixed [timestamp](#api-usage-time-zones--dates), recording when this
            resource was created.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Customer.Email">
            <summary>
            Customer's email address.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Customer.FamilyName">
            <summary>
            Customer's surname. Required unless a `company_name` is provided.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Customer.GivenName">
            <summary>
            Customer's first name. Required unless a `company_name` is provided.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Customer.Id">
            <summary>
            Unique identifier, beginning with "CU".
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Customer.Language">
            <summary>
            [ISO 639-1](http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
            code. Used as the language for notification emails sent by
            GoCardless if your organisation does not send its own (see
            [compliance requirements](#appendix-compliance-requirements)).
            Currently only "en", "fr", "de", "pt", "es", "it", "nl", "sv" are
            supported. If this is not provided, the language will be chosen
            based on the `country_code` (if supplied) or default to "en".
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Customer.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Customer.PostalCode">
            <summary>
            The customer's postal code.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Customer.Region">
            <summary>
            The customer's address region, county or department.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Customer.SwedishIdentityNumber">
            <summary>
            For Swedish customers only. The civic/company number (personnummer,
            samordningsnummer, or organisationsnummer) of the customer. Must be
            supplied if the customer's bank account is denominated in Swedish
            krona (SEK). This field cannot be changed once it has been set.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.CustomerBankAccount">
             <summary>
             Represents a customer bank account resource.
            
             Customer Bank Accounts hold the bank details of a
             [customer](#core-endpoints-customers). They always belong to a
             [customer](#core-endpoints-customers), and may be linked to several
             Direct Debit [mandates](#core-endpoints-mandates).
             
             Note that customer bank accounts must be unique, and so you will
             encounter a `bank_account_exists` error if you try to create a duplicate
             bank account. You may wish to handle this by updating the existing
             record instead, the ID of which will be provided as
             `links[customer_bank_account]` in the error response.
             </summary>
        </member>
        <member name="P:GoCardless.Resources.CustomerBankAccount.AccountHolderName">
            <summary>
            Name of the account holder, as known by the bank. Usually this
            matches the name of the linked
            [customer](#core-endpoints-customers). This field will be
            transliterated, upcased and truncated to 18 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CustomerBankAccount.AccountNumberEnding">
            <summary>
            Last two digits of account number.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CustomerBankAccount.BankName">
            <summary>
            Name of bank, taken from the bank details.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CustomerBankAccount.CountryCode">
            <summary>
            [ISO
            3166-1](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)
            alpha-2 code. Defaults to the country code of the `iban` if
            supplied, otherwise is required.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CustomerBankAccount.CreatedAt">
            <summary>
            Fixed [timestamp](#api-usage-time-zones--dates), recording when this
            resource was created.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CustomerBankAccount.Currency">
            <summary>
            [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217#Active_codes)
            currency code, defaults to national currency of `country_code`.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CustomerBankAccount.Enabled">
            <summary>
            Boolean value showing whether the bank account is enabled or
            disabled.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CustomerBankAccount.Id">
            <summary>
            Unique identifier, beginning with "BA".
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CustomerBankAccount.Links">
            <summary>
            Resources linked to this CustomerBankAccount.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CustomerBankAccount.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.CustomerBankAccountLinks">
            <summary>
            Resources linked to this CustomerBankAccount
            </summary>
        </member>
        <member name="P:GoCardless.Resources.CustomerBankAccountLinks.Customer">
            <summary>
            ID of the [customer](#core-endpoints-customers) that owns this bank
            account.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.Event">
             <summary>
             Represents a event resource.
            
             Events are stored for all webhooks. An event refers to a resource which
             has been updated, for example a payment which has been collected, or a
             mandate which has been transferred.
             </summary>
        </member>
        <member name="P:GoCardless.Resources.Event.Action">
            <summary>
            What has happened to the resource.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Event.CreatedAt">
            <summary>
            Fixed [timestamp](#api-usage-time-zones--dates), recording when this
            resource was created.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Event.Details">
            <summary>
            
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Event.Id">
            <summary>
            Unique identifier, beginning with "EV".
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Event.Links">
            <summary>
            Resources linked to this Event.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Event.Metadata">
            <summary>
            If the `details[origin]` is `api`, this will contain any metadata
            you specified when triggering this event. In other cases it will be
            an empty object.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Event.ResourceType">
            <summary>
            The resource type for this event. One of:
            <ul>
            <li>`payments`</li>
            <li>`mandates`</li>
            <li>`payouts`</li>
            <li>`refunds`</li>
            <li>`subscriptions`</li>
            </ul>
            </summary>
        </member>
        <member name="P:GoCardless.Resources.EventDetails.Cause">
            <summary>
            What triggered the event. _Note:_ `cause` is our simplified and
            predictable key indicating what triggered the event.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.EventDetails.Description">
            <summary>
            Human readable description of the cause. _Note:_ Changes to event
            descriptions are not considered breaking.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.EventDetails.Origin">
            <summary>
            Who initiated the event. One of:
            <ul>
            <li>`bank`: this event was triggered by a report from the banks</li>
            <li>`gocardless`: this event was performed by GoCardless
            automatically</li>
            <li>`api`: this event was triggered by an API endpoint</li>
            <li>`customer`: this event was triggered by a Customer</li>
            </ul>
            </summary>
        </member>
        <member name="P:GoCardless.Resources.EventDetails.ReasonCode">
            <summary>
            Set when a `bank` is the origin of the event. This is the reason
            code received in the report from the customer's bank. See the
            [GoCardless Direct Debit
            guide](https://gocardless.com/direct-debit/receiving-messages) for
            information on the meanings of different reason codes. _Note:_
            `reason_code` is payment scheme-specific and can be inconsistent
            between banks.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.EventDetails.Scheme">
            <summary>
            Set when a bank is the origin of the event.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.EventDetailsOrigin">
            <summary>
            Who initiated the event. One of:
            <ul>
            <li>`bank`: this event was triggered by a report from the banks</li>
            <li>`gocardless`: this event was performed by GoCardless automatically</li>
            <li>`api`: this event was triggered by an API endpoint</li>
            <li>`customer`: this event was triggered by a Customer</li>
            </ul>
            </summary>
        </member>
        <member name="F:GoCardless.Resources.EventDetailsOrigin.Bank">
            <summary>`origin` with a value of "bank"</summary>
        </member>
        <member name="F:GoCardless.Resources.EventDetailsOrigin.Api">
            <summary>`origin` with a value of "api"</summary>
        </member>
        <member name="F:GoCardless.Resources.EventDetailsOrigin.Gocardless">
            <summary>`origin` with a value of "gocardless"</summary>
        </member>
        <member name="F:GoCardless.Resources.EventDetailsOrigin.Customer">
            <summary>`origin` with a value of "customer"</summary>
        </member>
        <member name="T:GoCardless.Resources.EventDetailsScheme">
            <summary>
            Set when a bank is the origin of the event.
            </summary>
        </member>
        <member name="F:GoCardless.Resources.EventDetailsScheme.Autogiro">
            <summary>`scheme` with a value of "autogiro"</summary>
        </member>
        <member name="F:GoCardless.Resources.EventDetailsScheme.Bacs">
            <summary>`scheme` with a value of "bacs"</summary>
        </member>
        <member name="F:GoCardless.Resources.EventDetailsScheme.SepaCore">
            <summary>`scheme` with a value of "sepa_core"</summary>
        </member>
        <member name="F:GoCardless.Resources.EventDetailsScheme.SepaCor1">
            <summary>`scheme` with a value of "sepa_cor1"</summary>
        </member>
        <member name="T:GoCardless.Resources.EventLinks">
            <summary>
            Resources linked to this Event
            </summary>
        </member>
        <member name="P:GoCardless.Resources.EventLinks.Mandate">
            <summary>
            If `resource_type` is `mandates`, this is the ID of the
            [mandate](#core-endpoints-mandates) which has been updated.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.EventLinks.NewCustomerBankAccount">
            <summary>
            This is only included for mandate transfer events, when it is the ID
            of the [customer bank
            account](#core-endpoints-customer-bank-accounts) which the mandate
            is being transferred to.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.EventLinks.NewMandate">
            <summary>
            This is only included for mandate replaced events, when it is the ID
            of the new [mandate](#core-endpoints-mandates) that replaces the
            existing mandate.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.EventLinks.Organisation">
            <summary>
            If the event is included in a [webhook](#webhooks-overview) to an
            [OAuth app](#appendix-oauth), this is the ID of the account to which
            it belongs.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.EventLinks.ParentEvent">
            <summary>
            If this event was caused by another, this is the ID of the cause.
            For example, if a mandate is cancelled it automatically cancels all
            pending payments associated with it; in this case, the payment
            cancellation events would have the ID of the mandate cancellation
            event in this field.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.EventLinks.Payment">
            <summary>
            If `resource_type` is `payments`, this is the ID of the
            [payment](#core-endpoints-payments) which has been updated.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.EventLinks.Payout">
            <summary>
            If `resource_type` is `payouts`, this is the ID of the
            [payout](#core-endpoints-payouts) which has been updated.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.EventLinks.PreviousCustomerBankAccount">
            <summary>
            This is only included for mandate transfer events, when it is the ID
            of the [customer bank
            account](#core-endpoints-customer-bank-accounts) which the mandate
            is being transferred from.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.EventLinks.Refund">
            <summary>
            If `resource_type` is `refunds`, this is the ID of the
            [refund](#core-endpoints-refunds) which has been updated.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.EventLinks.Subscription">
            <summary>
            If `resource_type` is `subscription`, this is the ID of the
            [subscription](#core-endpoints-subscriptions) which has been
            updated.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.EventResourceType">
            <summary>
            The resource type for this event. One of:
            <ul>
            <li>`payments`</li>
            <li>`mandates`</li>
            <li>`payouts`</li>
            <li>`refunds`</li>
            <li>`subscriptions`</li>
            </ul>
            </summary>
        </member>
        <member name="F:GoCardless.Resources.EventResourceType.Payments">
            <summary>`resource_type` with a value of "payments"</summary>
        </member>
        <member name="F:GoCardless.Resources.EventResourceType.Mandates">
            <summary>`resource_type` with a value of "mandates"</summary>
        </member>
        <member name="F:GoCardless.Resources.EventResourceType.Payouts">
            <summary>`resource_type` with a value of "payouts"</summary>
        </member>
        <member name="F:GoCardless.Resources.EventResourceType.Refunds">
            <summary>`resource_type` with a value of "refunds"</summary>
        </member>
        <member name="F:GoCardless.Resources.EventResourceType.Subscriptions">
            <summary>`resource_type` with a value of "subscriptions"</summary>
        </member>
        <member name="T:GoCardless.Resources.Mandate">
             <summary>
             Represents a mandate resource.
            
             Mandates represent the Direct Debit mandate with a
             [customer](#core-endpoints-customers).
             
             GoCardless will notify you via a [webhook](#appendix-webhooks) whenever
             the status of a mandate changes.
             </summary>
        </member>
        <member name="P:GoCardless.Resources.Mandate.CreatedAt">
            <summary>
            Fixed [timestamp](#api-usage-time-zones--dates), recording when this
            resource was created.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Mandate.Id">
            <summary>
            Unique identifier, beginning with "MD".
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Mandate.Links">
            <summary>
            Resources linked to this Mandate.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Mandate.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Mandate.NextPossibleChargeDate">
            <summary>
            The earliest date a newly created payment for this mandate could be
            charged.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Mandate.PaymentsRequireApproval">
            <summary>
            Boolean value showing whether payments and subscriptions under this
            mandate require approval via an automated email before being
            processed.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Mandate.Reference">
            <summary>
            Unique reference. Different schemes have different length and
            [character set](#appendix-character-sets) requirements. GoCardless
            will generate a unique reference satisfying the different scheme
            requirements if this field is left blank.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Mandate.Scheme">
            <summary>
            <a name="mandates_scheme"></a>Direct Debit scheme to which this
            mandate and associated payments are submitted. Can be supplied or
            automatically detected from the customer's bank account. Currently
            only "autogiro", "bacs", and "sepa_core" are supported.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Mandate.Status">
            <summary>
            One of:
            <ul>
            <li>`pending_customer_approval`: the mandate has not yet been signed
            by the second customer</li>
            <li>`pending_submission`: the mandate has not yet been submitted to
            the customer's bank</li>
            <li>`submitted`: the mandate has been submitted to the customer's
            bank but has not been processed yet</li>
            <li>`active`: the mandate has been successfully set up by the
            customer's bank</li>
            <li>`failed`: the mandate could not be created</li>
            <li>`cancelled`: the mandate has been cancelled</li>
            <li>`expired`: the mandate has expired due to dormancy</li>
            </ul>
            </summary>
        </member>
        <member name="T:GoCardless.Resources.MandateLinks">
            <summary>
            Resources linked to this Mandate
            </summary>
        </member>
        <member name="P:GoCardless.Resources.MandateLinks.Creditor">
            <summary>
            ID of the associated [creditor](#core-endpoints-creditors).
            </summary>
        </member>
        <member name="P:GoCardless.Resources.MandateLinks.Customer">
            <summary>
            ID of the associated [customer](#core-endpoints-customers)
            </summary>
        </member>
        <member name="P:GoCardless.Resources.MandateLinks.CustomerBankAccount">
            <summary>
            ID of the associated [customer bank
            account](#core-endpoints-customer-bank-accounts) which the mandate
            is created and submits payments against.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.MandateLinks.NewMandate">
            <summary>
            ID of the new mandate if this mandate has been replaced.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.MandateStatus">
            <summary>
            One of:
            <ul>
            <li>`pending_customer_approval`: the mandate has not yet been signed by the second
            customer</li>
            <li>`pending_submission`: the mandate has not yet been submitted to the customer's bank</li>
            <li>`submitted`: the mandate has been submitted to the customer's bank but has not been
            processed yet</li>
            <li>`active`: the mandate has been successfully set up by the customer's bank</li>
            <li>`failed`: the mandate could not be created</li>
            <li>`cancelled`: the mandate has been cancelled</li>
            <li>`expired`: the mandate has expired due to dormancy</li>
            </ul>
            </summary>
        </member>
        <member name="F:GoCardless.Resources.MandateStatus.PendingCustomerApproval">
            <summary>`status` with a value of "pending_customer_approval"</summary>
        </member>
        <member name="F:GoCardless.Resources.MandateStatus.PendingSubmission">
            <summary>`status` with a value of "pending_submission"</summary>
        </member>
        <member name="F:GoCardless.Resources.MandateStatus.Submitted">
            <summary>`status` with a value of "submitted"</summary>
        </member>
        <member name="F:GoCardless.Resources.MandateStatus.Active">
            <summary>`status` with a value of "active"</summary>
        </member>
        <member name="F:GoCardless.Resources.MandateStatus.Failed">
            <summary>`status` with a value of "failed"</summary>
        </member>
        <member name="F:GoCardless.Resources.MandateStatus.Cancelled">
            <summary>`status` with a value of "cancelled"</summary>
        </member>
        <member name="F:GoCardless.Resources.MandateStatus.Expired">
            <summary>`status` with a value of "expired"</summary>
        </member>
        <member name="T:GoCardless.Resources.MandatePdf">
             <summary>
             Represents a mandate pdf resource.
            
             Mandate PDFs allow you to easily display [scheme-rules
             compliant](#appendix-compliance-requirements) Direct Debit mandates to
             your customers.
             </summary>
        </member>
        <member name="P:GoCardless.Resources.MandatePdf.ExpiresAt">
            <summary>
            The date and time at which the `url` will expire (10 minutes after
            the original request).
            </summary>
        </member>
        <member name="P:GoCardless.Resources.MandatePdf.Url">
            <summary>
            The URL at which this mandate PDF can be viewed until it expires at
            the date and time specified by `expires_at`. You should not store
            this URL or rely on its structure remaining the same.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key names up to 50 characters and values up to 500 characters
            </summary>
        </member>
        <member name="M:GoCardless.Resources.Metadata.Add(System.String,System.String)">
            <summary>Add a new key-value pair</summary>
        </member>
        <member name="M:GoCardless.Resources.Metadata.GetEnumerator">
            <summary>Returns an enumerator for the metadata collection</summary>
        </member>
        <member name="M:GoCardless.Resources.Metadata.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>Add a new key-value pair</summary>
        </member>
        <member name="M:GoCardless.Resources.Metadata.Clear">
            <summary>Remove all key-value pairs</summary>
        </member>
        <member name="M:GoCardless.Resources.Metadata.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>Check whether a key-value pair exists</summary>
        </member>
        <member name="M:GoCardless.Resources.Metadata.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <summary>Copies the elements of the collection to an array, starting at the specified array index</summary>
        </member>
        <member name="M:GoCardless.Resources.Metadata.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>Remove a key-value pair by key-value pair</summary>
        </member>
        <member name="P:GoCardless.Resources.Metadata.Count">
            <summary>Returns the count of metadata items</summary>
        </member>
        <member name="P:GoCardless.Resources.Metadata.IsReadOnly">
            <summary>Gets a value indicating whether the collection is read-only</summary>
        </member>
        <member name="M:GoCardless.Resources.Metadata.ContainsKey(System.String)">
            <summary>Check whether a key exists</summary>
        </member>
        <member name="M:GoCardless.Resources.Metadata.Remove(System.String)">
            <summary>Remove a key-value pair by key</summary>
        </member>
        <member name="M:GoCardless.Resources.Metadata.TryGetValue(System.String,System.String@)">
            <summary>Get the value associated with the specified key</summary>
        </member>
        <member name="M:GoCardless.Resources.Metadata.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator for the metadata collection</summary>
        </member>
        <member name="P:GoCardless.Resources.Metadata.Keys">
            <summary>Get a collection of the metadata keys</summary>
        </member>
        <member name="P:GoCardless.Resources.Metadata.Values">
            <summary>Get a collection of the metadata values</summary>
        </member>
        <member name="T:GoCardless.Resources.Payment">
             <summary>
             Represents a payment resource.
            
             Payment objects represent payments from a
             [customer](#core-endpoints-customers) to a
             [creditor](#core-endpoints-creditors), taken against a Direct Debit
             [mandate](#core-endpoints-mandates).
             
             GoCardless will notify you via a [webhook](#appendix-webhooks) whenever
             the state of a payment changes.
             </summary>
        </member>
        <member name="P:GoCardless.Resources.Payment.Amount">
            <summary>
            Amount in pence (GBP), cents (EUR), or öre (SEK).
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payment.AmountRefunded">
            <summary>
            Amount [refunded](#core-endpoints-refunds) in pence/cents/öre.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payment.ChargeDate">
            <summary>
            A future date on which the payment should be collected. If not
            specified, the payment will be collected as soon as possible. This
            must be on or after the [mandate](#core-endpoints-mandates)'s
            `next_possible_charge_date`, and will be rolled-forwards by
            GoCardless if it is not a working day.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payment.CreatedAt">
            <summary>
            Fixed [timestamp](#api-usage-time-zones--dates), recording when this
            resource was created.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payment.Currency">
            <summary>
            [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217#Active_codes)
            currency code. Currently only "GBP", "EUR", and "SEK" are supported.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payment.Description">
            <summary>
            A human-readable description of the payment. This will be included
            in the notification email GoCardless sends to your customer if your
            organisation does not send its own notifications (see [compliance
            requirements](#appendix-compliance-requirements)).
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payment.Id">
            <summary>
            Unique identifier, beginning with "PM".
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payment.Links">
            <summary>
            Resources linked to this Payment.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payment.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payment.Reference">
            <summary>
            An optional payment reference that will appear on your customer's
            bank statement. For Bacs payments this can be up to 10 characters,
            for SEPA payments the limit is 140 characters, and for Autogiro
            payments the limit is 11 characters. <p
            class='restricted-notice'><strong>Restricted</strong>: You can only
            specify a payment reference for Bacs payments (that is, when
            collecting from the UK) if you're on the <a
            href='https://gocardless.com/pricing'>GoCardless Plus or Pro
            packages</a>.</p>
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payment.Status">
            <summary>
            One of:
            <ul>
            <li>`pending_customer_approval`: we're waiting for the customer to
            approve this payment</li>
            <li>`pending_submission`: the payment has been created, but not yet
            submitted to the banks</li>
            <li>`submitted`: the payment has been submitted to the banks</li>
            <li>`confirmed`: the payment has been confirmed as collected</li>
            <li>`paid_out`:  the payment has been included in a
            [payout](#core-endpoints-payouts)</li>
            <li>`cancelled`: the payment has been cancelled</li>
            <li>`customer_approval_denied`: the customer has denied approval for
            the payment. You should contact the customer directly</li>
            <li>`failed`: the payment failed to be processed. Note that payments
            can fail after being confirmed if the failure message is sent late
            by the banks.</li>
            <li>`charged_back`: the payment has been charged back</li>
            </ul>
            </summary>
        </member>
        <member name="T:GoCardless.Resources.PaymentCurrency">
            <summary>
            [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217#Active_codes) currency code. Currently only
            "GBP", "EUR", and "SEK" are supported.
            </summary>
        </member>
        <member name="F:GoCardless.Resources.PaymentCurrency.GBP">
            <summary>`currency` with a value of "GBP"</summary>
        </member>
        <member name="F:GoCardless.Resources.PaymentCurrency.EUR">
            <summary>`currency` with a value of "EUR"</summary>
        </member>
        <member name="F:GoCardless.Resources.PaymentCurrency.SEK">
            <summary>`currency` with a value of "SEK"</summary>
        </member>
        <member name="T:GoCardless.Resources.PaymentLinks">
            <summary>
            Resources linked to this Payment
            </summary>
        </member>
        <member name="P:GoCardless.Resources.PaymentLinks.Creditor">
            <summary>
            ID of [creditor](#core-endpoints-creditors) to which the collected
            payment will be sent.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.PaymentLinks.Mandate">
            <summary>
            ID of the [mandate](#core-endpoints-mandates) against which this
            payment should be collected.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.PaymentLinks.Payout">
            <summary>
            ID of [payout](#core-endpoints-payouts) which contains the funds
            from this payment.<br/>**Note**: this property will not be present
            until the payment has been successfully collected.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.PaymentLinks.Subscription">
            <summary>
            ID of [subscription](#core-endpoints-subscriptions) from which this
            payment was created.<br/>**Note**: this property will only be
            present if this payment is part of a subscription.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.PaymentStatus">
            <summary>
            One of:
            <ul>
            <li>`pending_customer_approval`: we're waiting for the customer to approve this payment</li>
            <li>`pending_submission`: the payment has been created, but not yet submitted to the
            banks</li>
            <li>`submitted`: the payment has been submitted to the banks</li>
            <li>`confirmed`: the payment has been confirmed as collected</li>
            <li>`paid_out`:  the payment has been included in a [payout](#core-endpoints-payouts)</li>
            <li>`cancelled`: the payment has been cancelled</li>
            <li>`customer_approval_denied`: the customer has denied approval for the payment. You should
            contact the customer directly</li>
            <li>`failed`: the payment failed to be processed. Note that payments can fail after being
            confirmed if the failure message is sent late by the banks.</li>
            <li>`charged_back`: the payment has been charged back</li>
            </ul>
            </summary>
        </member>
        <member name="F:GoCardless.Resources.PaymentStatus.PendingCustomerApproval">
            <summary>`status` with a value of "pending_customer_approval"</summary>
        </member>
        <member name="F:GoCardless.Resources.PaymentStatus.PendingSubmission">
            <summary>`status` with a value of "pending_submission"</summary>
        </member>
        <member name="F:GoCardless.Resources.PaymentStatus.Submitted">
            <summary>`status` with a value of "submitted"</summary>
        </member>
        <member name="F:GoCardless.Resources.PaymentStatus.Confirmed">
            <summary>`status` with a value of "confirmed"</summary>
        </member>
        <member name="F:GoCardless.Resources.PaymentStatus.PaidOut">
            <summary>`status` with a value of "paid_out"</summary>
        </member>
        <member name="F:GoCardless.Resources.PaymentStatus.Cancelled">
            <summary>`status` with a value of "cancelled"</summary>
        </member>
        <member name="F:GoCardless.Resources.PaymentStatus.CustomerApprovalDenied">
            <summary>`status` with a value of "customer_approval_denied"</summary>
        </member>
        <member name="F:GoCardless.Resources.PaymentStatus.Failed">
            <summary>`status` with a value of "failed"</summary>
        </member>
        <member name="F:GoCardless.Resources.PaymentStatus.ChargedBack">
            <summary>`status` with a value of "charged_back"</summary>
        </member>
        <member name="T:GoCardless.Resources.Payout">
             <summary>
             Represents a payout resource.
            
             Payouts represent transfers from GoCardless to a
             [creditor](#core-endpoints-creditors). Each payout contains the funds
             collected from one or many [payments](#core-endpoints-payments). Payouts
             are created automatically after a payment has been successfully
             collected.
             </summary>
        </member>
        <member name="P:GoCardless.Resources.Payout.Amount">
            <summary>
            Amount in pence or cents.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payout.ArrivalDate">
            <summary>
            Date the payout is due to arrive in the creditor's bank account.
            One of:
            <ul>
              <li>`yyyy-mm-dd`: the payout has been paid and is due to arrive in
            the creditor's bank
              account on this day</li>
              <li>`null`: the payout hasn't been paid yet</li>
            </ul>
            
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payout.CreatedAt">
            <summary>
            Fixed [timestamp](#api-usage-time-zones--dates), recording when this
            resource was created.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payout.Currency">
            <summary>
            [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217#Active_codes)
            currency code. Currently only "GBP", "EUR", and "SEK" are supported.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payout.DeductedFees">
            <summary>
            Fees that have already been deducted from the payout amount in pence
            or cents.
            
            For each `late_failure_settled` or `chargeback_settled` action, we
            refund the transaction fees in a payout. This means that a payout
            can have a negative `deducted_fees`. This field is calculated as
            `GoCardless fees + app fees - refunded fees`
            
            If the merchant is invoiced for fees separately from the payout,
            then `deducted_fees` will be 0.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payout.Id">
            <summary>
            Unique identifier, beginning with "PO".
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payout.Links">
            <summary>
            Resources linked to this Payout.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payout.PayoutType">
            <summary>
            Whether a payout contains merchant revenue or partner fees.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payout.Reference">
            <summary>
            Reference which appears on the creditor's bank statement.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Payout.Status">
            <summary>
            One of:
            <ul>
            <li>`pending`: the payout has been created, but not yet sent to the
            banks</li>
            <li>`paid`: the payout has been sent to the banks</li>
            </ul>
            </summary>
        </member>
        <member name="T:GoCardless.Resources.PayoutCurrency">
            <summary>
            [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217#Active_codes) currency code. Currently only
            "GBP", "EUR", and "SEK" are supported.
            </summary>
        </member>
        <member name="F:GoCardless.Resources.PayoutCurrency.GBP">
            <summary>`currency` with a value of "GBP"</summary>
        </member>
        <member name="F:GoCardless.Resources.PayoutCurrency.EUR">
            <summary>`currency` with a value of "EUR"</summary>
        </member>
        <member name="F:GoCardless.Resources.PayoutCurrency.SEK">
            <summary>`currency` with a value of "SEK"</summary>
        </member>
        <member name="T:GoCardless.Resources.PayoutLinks">
            <summary>
            Resources linked to this Payout
            </summary>
        </member>
        <member name="P:GoCardless.Resources.PayoutLinks.Creditor">
            <summary>
            ID of [creditor](#core-endpoints-creditors) who will receive this
            payout, i.e. the owner of the `creditor_bank_account`.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.PayoutLinks.CreditorBankAccount">
            <summary>
            ID of [bank account](#core-endpoints-creditor-bank-accounts) which
            this will be sent to.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.PayoutPayoutType">
            <summary>
            Whether a payout contains merchant revenue or partner fees.
            </summary>
        </member>
        <member name="F:GoCardless.Resources.PayoutPayoutType.Merchant">
            <summary>`payout_type` with a value of "merchant"</summary>
        </member>
        <member name="F:GoCardless.Resources.PayoutPayoutType.Partner">
            <summary>`payout_type` with a value of "partner"</summary>
        </member>
        <member name="T:GoCardless.Resources.PayoutStatus">
            <summary>
            One of:
            <ul>
            <li>`pending`: the payout has been created, but not yet sent to the banks</li>
            <li>`paid`: the payout has been sent to the banks</li>
            </ul>
            </summary>
        </member>
        <member name="F:GoCardless.Resources.PayoutStatus.Pending">
            <summary>`status` with a value of "pending"</summary>
        </member>
        <member name="F:GoCardless.Resources.PayoutStatus.Paid">
            <summary>`status` with a value of "paid"</summary>
        </member>
        <member name="T:GoCardless.Resources.RedirectFlow">
             <summary>
             Represents a redirect flow resource.
            
             Redirect flows enable you to use GoCardless' [hosted payment
             pages](https://pay-sandbox.gocardless.com/AL000000AKFPFF) to set up
             mandates with your customers. These pages are fully compliant and have
             been translated into Dutch, French, German, Italian, Portuguese, Spanish
             and Swedish.
             
             The overall flow is:
             
             1. You [create](#redirect-flows-create-a-redirect-flow) a redirect flow
             for your customer, and redirect them to the returned redirect url, e.g.
             `https://pay.gocardless.com/flow/RE123`.
             
             2. Your customer supplies their name, email, address, and bank account
             details, and submits the form. This securely stores their details, and
             redirects them back to your `success_redirect_url` with
             `redirect_flow_id=RE123` in the querystring.
             
             3. You [complete](#redirect-flows-complete-a-redirect-flow) the redirect
             flow, which creates a [customer](#core-endpoints-customers), [customer
             bank account](#core-endpoints-customer-bank-accounts), and
             [mandate](#core-endpoints-mandates), and returns the ID of the mandate.
             You may wish to create a [subscription](#core-endpoints-subscriptions)
             or [payment](#core-endpoints-payments) at this point.
             
             Once you have [completed](#redirect-flows-complete-a-redirect-flow) the
             redirect flow via the API, you should display a confirmation page to
             your customer, confirming that their Direct Debit has been set up. You
             can build your own page, or redirect to the one we provide in the
             `confirmation_url` attribute of the redirect flow.
             
             Redirect flows expire 30 minutes after they are first created. You
             cannot complete an expired redirect flow.
             </summary>
        </member>
        <member name="P:GoCardless.Resources.RedirectFlow.ConfirmationUrl">
            <summary>
            The URL of a confirmation page, which you may optionally redirect
            the customer to rather than use your own page, that confirms in
            their chosen language that their Direct Debit has been set up
            successfully. Only returned once the customer has set up their
            mandate via the payment pages and the redirect flow has been
            [completed](#redirect-flows-complete-a-redirect-flow), and only
            available for 15 minutes from when you complete the redirect flow.
            The structure of this URL may change at any time, so you should read
            it directly from the API response.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.RedirectFlow.CreatedAt">
            <summary>
            Fixed [timestamp](#api-usage-time-zones--dates), recording when this
            resource was created.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.RedirectFlow.Description">
            <summary>
            A description of the item the customer is paying for. This will be
            shown on the hosted payment pages.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.RedirectFlow.Id">
            <summary>
            Unique identifier, beginning with "RE".
            </summary>
        </member>
        <member name="P:GoCardless.Resources.RedirectFlow.Links">
            <summary>
            Resources linked to this RedirectFlow.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.RedirectFlow.RedirectUrl">
            <summary>
            The URL of the hosted payment pages for this redirect flow. This is
            the URL you should redirect your customer to.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.RedirectFlow.Scheme">
            <summary>
            The Direct Debit scheme of the mandate. If specified, the payment
            pages will only allow the set-up of a mandate for the specified
            scheme. It is recommended that you leave this blank so the most
            appropriate scheme is picked based on the customer's bank account.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.RedirectFlow.SessionToken">
            <summary>
            The customer's session ID must be provided when the redirect flow is
            set up and again when it is completed. This allows integrators to
            ensure that the user who was originally sent to the GoCardless
            payment pages is the one who has completed them.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.RedirectFlow.SuccessRedirectUrl">
            <summary>
            The URL to redirect to upon successful mandate setup. You must use a
            URL beginning `https` in the live environment.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.RedirectFlowLinks">
            <summary>
            Resources linked to this RedirectFlow
            </summary>
        </member>
        <member name="P:GoCardless.Resources.RedirectFlowLinks.Creditor">
            <summary>
            The [creditor](#core-endpoints-creditors) for whom the mandate will
            be created. The `name` of the creditor will be displayed on the
            payment page.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.RedirectFlowLinks.Customer">
            <summary>
            ID of [customer](#core-endpoints-customers) created by this redirect
            flow.<br/>**Note**: this property will not be present until the
            redirect flow has been successfully completed.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.RedirectFlowLinks.CustomerBankAccount">
            <summary>
            ID of [customer bank
            account](#core-endpoints-customer-bank-accounts) created by this
            redirect flow.<br/>**Note**: this property will not be present until
            the redirect flow has been successfully completed.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.RedirectFlowLinks.Mandate">
            <summary>
            ID of [mandate](#core-endpoints-mandates) created by this redirect
            flow.<br/>**Note**: this property will not be present until the
            redirect flow has been successfully completed.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.RedirectFlowScheme">
            <summary>
            The Direct Debit scheme of the mandate. If specified, the payment pages will only allow the
            set-up of a mandate for the specified scheme. It is recommended that you leave this blank so
            the most appropriate scheme is picked based on the customer's bank account.
            </summary>
        </member>
        <member name="F:GoCardless.Resources.RedirectFlowScheme.Autogiro">
            <summary>`scheme` with a value of "autogiro"</summary>
        </member>
        <member name="F:GoCardless.Resources.RedirectFlowScheme.Bacs">
            <summary>`scheme` with a value of "bacs"</summary>
        </member>
        <member name="F:GoCardless.Resources.RedirectFlowScheme.SepaCore">
            <summary>`scheme` with a value of "sepa_core"</summary>
        </member>
        <member name="T:GoCardless.Resources.Refund">
             <summary>
             Represents a refund resource.
            
             Refund objects represent (partial) refunds of a
             [payment](#core-endpoints-payments) back to the
             [customer](#core-endpoints-customers).
             
             GoCardless will notify you via a [webhook](#appendix-webhooks) whenever
             a refund is created, and will update the `amount_refunded` property of
             the payment.
             </summary>
        </member>
        <member name="P:GoCardless.Resources.Refund.Amount">
            <summary>
            Amount in pence/cents/öre.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Refund.CreatedAt">
            <summary>
            Fixed [timestamp](#api-usage-time-zones--dates), recording when this
            resource was created.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Refund.Currency">
            <summary>
            [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217#Active_codes)
            currency code. This is set to the currency of the refund's
            [payment](#core-endpoints-payments).
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Refund.Id">
            <summary>
            Unique identifier, beginning with "RF".
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Refund.Links">
            <summary>
            Resources linked to this Refund.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Refund.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Refund.Reference">
            <summary>
            An optional refund reference, displayed on your customer's bank
            statement. This can be up to 18 characters long for Bacs payments,
            140 characters for SEPA payments, or 25 characters for Autogiro
            payments.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.RefundLinks">
            <summary>
            Resources linked to this Refund
            </summary>
        </member>
        <member name="P:GoCardless.Resources.RefundLinks.Payment">
            <summary>
            ID of the [payment](#core-endpoints-payments) against which the
            refund is being made.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.Subscription">
             <summary>
             Represents a subscription resource.
            
             Subscriptions create [payments](#core-endpoints-payments) according to a
             schedule.
             
             ### Recurrence Rules
             
             The following rules apply when specifying recurrence:
             
             - The first payment must be charged within 1 year.
             - When neither `month` nor `day_of_month` are present, the subscription
             will recur from the `start_date` based on the `interval_unit`.
             - If `month` or `day_of_month` are present, the recurrence rules will be
             applied from the `start_date`, and the following validations apply:
             
             | interval_unit   | month                                          |
             day_of_month                            |
             | :-------------- | :--------------------------------------------- |
             :-------------------------------------- |
             | yearly          | optional (required if `day_of_month` provided) |
             optional (required if `month` provided) |
             | monthly         | invalid                                        |
             required                                |
             | weekly          | invalid                                        |
             invalid                                 |
             
             Examples:
             
             | interval_unit   | interval   | month   | day_of_month   | valid?      
                                                   |
             | :-------------- | :--------- | :------ | :------------- |
             :------------------------------------------------- |
             | yearly          | 1          | january | -1             | valid       
                                                   |
             | yearly          | 1          | march   |                | invalid -
             missing `day_of_month`                   |
             | monthly         | 6          |         | 12             | valid       
                                                   |
             | monthly         | 6          | august  | 12             | invalid -
             `month` must be blank                    |
             | weekly          | 2          |         |                | valid       
                                                   |
             | weekly          | 2          | october | 10             | invalid -
             `month` and `day_of_month` must be blank |
             
             ### Rolling dates
             
             When a charge date falls on a non-business day, one of two things will
             happen:
             
             - if the recurrence rule specified `-1` as the `day_of_month`, the
             charge date will be rolled __backwards__ to the previous business day
             (i.e., the last working day of the month).
             - otherwise the charge date will be rolled __forwards__ to the next
             business day.
             
             </summary>
        </member>
        <member name="P:GoCardless.Resources.Subscription.Amount">
            <summary>
            Amount in pence (GBP), cents (EUR), or öre (SEK).
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Subscription.CreatedAt">
            <summary>
            Fixed [timestamp](#api-usage-time-zones--dates), recording when this
            resource was created.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Subscription.Currency">
            <summary>
            [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.
            Currently only `GBP`, `EUR`, and `SEK` are supported.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Subscription.DayOfMonth">
            <summary>
            As per RFC 2445. The day of the month to charge customers on.
            `1`-`28` or `-1` to indicate the last day of the month.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Subscription.EndDate">
            <summary>
            Date on or after which no further payments should be created. If
            this field is blank and `count` is not specified, the subscription
            will continue forever. <p
            class='deprecated-notice'><strong>Deprecated</strong>: This field
            will be removed in a future API version. Use `count` to specify a
            number of payments instead. </p>
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Subscription.Id">
            <summary>
            Unique identifier, beginning with "SB".
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Subscription.Interval">
            <summary>
            Number of `interval_units` between customer charge dates. Must
            result in at least one charge date per year. Defaults to `1`.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Subscription.IntervalUnit">
            <summary>
            The unit of time between customer charge dates. One of `weekly`,
            `monthly` or `yearly`.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Subscription.Links">
            <summary>
            Resources linked to this Subscription.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Subscription.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Subscription.Month">
            <summary>
            Name of the month on which to charge a customer. Must be lowercase.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Subscription.Name">
            <summary>
            Optional name for the subscription. This will be set as the
            description on each payment created. Must not exceed 255 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Subscription.PaymentReference">
            <summary>
            An optional payment reference. This will be set as the reference on
            each payment created and will appear on your customer's bank
            statement. See the documentation for the [create payment
            endpoint](#payments-create-a-payment) for more details. <p
            class='restricted-notice'><strong>Restricted</strong>: You need your
            own Service User Number to specify a payment reference for Bacs
            payments.</p>
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Subscription.StartDate">
            <summary>
            The date on which the first payment should be charged. Must be
            within one year of creation and on or after the
            [mandate](#core-endpoints-mandates)'s `next_possible_charge_date`.
            When blank, this will be set as the mandate's
            `next_possible_charge_date`.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Subscription.Status">
            <summary>
            One of:
            <ul>
            <li>`pending_customer_approval`: the subscription is waiting for
            customer approval before becoming active</li>
            <li>`customer_approval_denied`: the customer did not approve the
            subscription</li>
            <li>`active`: the subscription is currently active and will continue
            to create payments</li>
            <li>`finished`: all of the payments scheduled for creation under
            this subscription have been created</li>
            <li>`cancelled`: the subscription has been cancelled and will no
            longer create payments</li>
            </ul>
            </summary>
        </member>
        <member name="P:GoCardless.Resources.Subscription.UpcomingPayments">
            <summary>
            Up to 10 upcoming payments with the amount, in pence, and charge
            date for each.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.SubscriptionIntervalUnit">
            <summary>
            The unit of time between customer charge dates. One of `weekly`, `monthly` or `yearly`.
            </summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionIntervalUnit.Weekly">
            <summary>`interval_unit` with a value of "weekly"</summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionIntervalUnit.Monthly">
            <summary>`interval_unit` with a value of "monthly"</summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionIntervalUnit.Yearly">
            <summary>`interval_unit` with a value of "yearly"</summary>
        </member>
        <member name="T:GoCardless.Resources.SubscriptionLinks">
            <summary>
            Resources linked to this Subscription
            </summary>
        </member>
        <member name="P:GoCardless.Resources.SubscriptionLinks.Mandate">
            <summary>
            ID of the associated [mandate](#core-endpoints-mandates) which the
            subscription will create payments against.
            </summary>
        </member>
        <member name="T:GoCardless.Resources.SubscriptionMonth">
            <summary>
            Name of the month on which to charge a customer. Must be lowercase.
            </summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionMonth.January">
            <summary>`month` with a value of "january"</summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionMonth.February">
            <summary>`month` with a value of "february"</summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionMonth.March">
            <summary>`month` with a value of "march"</summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionMonth.April">
            <summary>`month` with a value of "april"</summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionMonth.May">
            <summary>`month` with a value of "may"</summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionMonth.June">
            <summary>`month` with a value of "june"</summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionMonth.July">
            <summary>`month` with a value of "july"</summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionMonth.August">
            <summary>`month` with a value of "august"</summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionMonth.September">
            <summary>`month` with a value of "september"</summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionMonth.October">
            <summary>`month` with a value of "october"</summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionMonth.November">
            <summary>`month` with a value of "november"</summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionMonth.December">
            <summary>`month` with a value of "december"</summary>
        </member>
        <member name="T:GoCardless.Resources.SubscriptionStatus">
            <summary>
            One of:
            <ul>
            <li>`pending_customer_approval`: the subscription is waiting for customer approval before
            becoming active</li>
            <li>`customer_approval_denied`: the customer did not approve the subscription</li>
            <li>`active`: the subscription is currently active and will continue to create payments</li>
            <li>`finished`: all of the payments scheduled for creation under this subscription have been
            created</li>
            <li>`cancelled`: the subscription has been cancelled and will no longer create payments</li>
            </ul>
            </summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionStatus.PendingCustomerApproval">
            <summary>`status` with a value of "pending_customer_approval"</summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionStatus.CustomerApprovalDenied">
            <summary>`status` with a value of "customer_approval_denied"</summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionStatus.Active">
            <summary>`status` with a value of "active"</summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionStatus.Finished">
            <summary>`status` with a value of "finished"</summary>
        </member>
        <member name="F:GoCardless.Resources.SubscriptionStatus.Cancelled">
            <summary>`status` with a value of "cancelled"</summary>
        </member>
        <member name="T:GoCardless.Resources.SubscriptionUpcomingPayment">
            <summary>
            Up to 10 upcoming payments with the amount, in pence, and charge date
            for each.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.SubscriptionUpcomingPayment.Amount">
            <summary>
            The amount of this payment, in pence.
            </summary>
        </member>
        <member name="P:GoCardless.Resources.SubscriptionUpcomingPayment.ChargeDate">
            <summary>
            The date on which this payment will be charged.
            </summary>
        </member>
        <member name="T:GoCardless.Services.BankDetailsLookupService">
             <summary>
             Service class for working with bank details lookup resources.
            
             Look up the name and reachability of a bank.
             </summary>
        </member>
        <member name="M:GoCardless.Services.BankDetailsLookupService.#ctor(GoCardless.GoCardlessClient)">
            <summary>
            Constructor. Users of this library should not call this. An instance of this
            class can be accessed through an initialised GoCardlessClient.
            </summary>
        </member>
        <member name="M:GoCardless.Services.BankDetailsLookupService.CreateAsync(GoCardless.Services.BankDetailsLookupCreateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Performs a bank details lookup.
            
            As part of the lookup a modulus check and reachability check are
            performed.
            
            Bank account details may be supplied using [local
            details](#appendix-local-bank-details) or an IBAN.
            
            _Note:_ Usage of this endpoint is monitored. If your organisation
            relies on GoCardless for
            modulus or reachability checking but not for payment collection,
            please get in touch.
            </summary>
            <param name="request">An optional `BankDetailsLookupCreateRequest` representing the body for this create request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single bank details lookup resource</returns>
        </member>
        <member name="T:GoCardless.Services.BankDetailsLookupCreateRequest">
            <summary>
            Performs a bank details lookup.
            
            As part of the lookup a modulus check and reachability check are
            performed.
            
            Bank account details may be supplied using [local
            details](#appendix-local-bank-details) or an IBAN.
            
            _Note:_ Usage of this endpoint is monitored. If your organisation relies
            on GoCardless for
            modulus or reachability checking but not for payment collection, please
            get in touch.
            </summary>
        </member>
        <member name="P:GoCardless.Services.BankDetailsLookupCreateRequest.AccountNumber">
            <summary>
            Bank account number - see [local
            details](#appendix-local-bank-details) for more information.
            Alternatively you can provide an `iban`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.BankDetailsLookupCreateRequest.BankCode">
            <summary>
            Bank code - see [local details](#appendix-local-bank-details) for
            more information. Alternatively you can provide an `iban`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.BankDetailsLookupCreateRequest.BranchCode">
            <summary>
            Branch code - see [local details](#appendix-local-bank-details) for
            more information. Alternatively you can provide an `iban`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.BankDetailsLookupCreateRequest.CountryCode">
            <summary>
            [ISO
            3166-1](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)
            alpha-2 code. Must be provided if specifying local details.
            </summary>
        </member>
        <member name="P:GoCardless.Services.BankDetailsLookupCreateRequest.Iban">
            <summary>
            International Bank Account Number. Alternatively you can provide
            [local details](#appendix-local-bank-details).
            </summary>
        </member>
        <member name="T:GoCardless.Services.BankDetailsLookupResponse">
            <summary>
            An API response for a request returning a single bank details lookup.
            </summary>
        </member>
        <member name="P:GoCardless.Services.BankDetailsLookupResponse.BankDetailsLookup">
            <summary>
            The bank details lookup from the response.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CreditorBankAccountService">
             <summary>
             Service class for working with creditor bank account resources.
            
             Creditor Bank Accounts hold the bank details of a
             [creditor](#core-endpoints-creditors). These are the bank accounts which
             your [payouts](#core-endpoints-payouts) will be sent to.
             
             Note that creditor bank accounts must be unique, and so you will
             encounter a `bank_account_exists` error if you try to create a duplicate
             bank account. You may wish to handle this by updating the existing
             record instead, the ID of which will be provided as
             `links[creditor_bank_account]` in the error response.
             </summary>
        </member>
        <member name="M:GoCardless.Services.CreditorBankAccountService.#ctor(GoCardless.GoCardlessClient)">
            <summary>
            Constructor. Users of this library should not call this. An instance of this
            class can be accessed through an initialised GoCardlessClient.
            </summary>
        </member>
        <member name="M:GoCardless.Services.CreditorBankAccountService.CreateAsync(GoCardless.Services.CreditorBankAccountCreateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Creates a new creditor bank account object.
            </summary>
            <param name="request">An optional `CreditorBankAccountCreateRequest` representing the body for this create request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single creditor bank account resource</returns>
        </member>
        <member name="M:GoCardless.Services.CreditorBankAccountService.ListAsync(GoCardless.Services.CreditorBankAccountListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of
            your creditor bank accounts.
            </summary>
            <param name="request">An optional `CreditorBankAccountListRequest` representing the query parameters for this list request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A set of creditor bank account resources</returns>
        </member>
        <member name="M:GoCardless.Services.CreditorBankAccountService.All(GoCardless.Services.CreditorBankAccountListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of creditor bank accounts.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.CreditorBankAccountService.AllAsync(GoCardless.Services.CreditorBankAccountListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of creditor bank accounts.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.CreditorBankAccountService.GetAsync(System.String,GoCardless.Services.CreditorBankAccountGetRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Retrieves the details of an existing creditor bank account.
            </summary>
            <param name="identity">Unique identifier, beginning with "BA".</param>
            <param name="request">An optional `CreditorBankAccountGetRequest` representing the query parameters for this get request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single creditor bank account resource</returns>
        </member>
        <member name="M:GoCardless.Services.CreditorBankAccountService.DisableAsync(System.String,GoCardless.Services.CreditorBankAccountDisableRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Immediately disables the bank account, no money can be paid out to a
            disabled account.
            
            This will return a `disable_failed` error if the bank account has
            already been disabled.
            
            A disabled bank account can be re-enabled by creating a new bank
            account resource with the same details.
            </summary>
            <param name="identity">Unique identifier, beginning with "BA".</param>
            <param name="request">An optional `CreditorBankAccountDisableRequest` representing the body for this disable request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single creditor bank account resource</returns>
        </member>
        <member name="T:GoCardless.Services.CreditorBankAccountCreateRequest">
            <summary>
            Creates a new creditor bank account object.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountCreateRequest.AccountHolderName">
            <summary>
            Name of the account holder, as known by the bank. Usually this is
            the same as the name stored with the linked
            [creditor](#core-endpoints-creditors). This field will be
            transliterated, upcased and truncated to 18 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountCreateRequest.AccountNumber">
            <summary>
            Bank account number - see [local
            details](#appendix-local-bank-details) for more information.
            Alternatively you can provide an `iban`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountCreateRequest.BankCode">
            <summary>
            Bank code - see [local details](#appendix-local-bank-details) for
            more information. Alternatively you can provide an `iban`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountCreateRequest.BranchCode">
            <summary>
            Branch code - see [local details](#appendix-local-bank-details) for
            more information. Alternatively you can provide an `iban`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountCreateRequest.CountryCode">
            <summary>
            [ISO
            3166-1](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)
            alpha-2 code. Defaults to the country code of the `iban` if
            supplied, otherwise is required.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountCreateRequest.Currency">
            <summary>
            [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217#Active_codes)
            currency code, defaults to national currency of `country_code`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountCreateRequest.Iban">
            <summary>
            International Bank Account Number. Alternatively you can provide
            [local details](#appendix-local-bank-details). IBANs are not
            accepted for Swedish bank accounts denominated in SEK - you must
            supply [local details](#local-bank-details-sweden).
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountCreateRequest.Links">
            <summary>
            Linked resources.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CreditorBankAccountCreateRequest.CreditorBankAccountLinks">
            <summary>
            Linked resources for a CreditorBankAccount.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountCreateRequest.CreditorBankAccountLinks.Creditor">
            <summary>
            ID of the [creditor](#core-endpoints-creditors) that owns this
            bank account.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountCreateRequest.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountCreateRequest.SetAsDefaultPayoutAccount">
            <summary>
            Defaults to `false`. When this is set to `true`, it will cause this
            bank account to be set as the account that GoCardless will pay out
            to.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountCreateRequest.IdempotencyKey">
            <summary>
            A unique key to ensure that this request only succeeds once, allowing you to safely retry request errors such as network failures.
            Any requests, where supported, to create a resource with a key that has previously been used will not succeed.
            See: https://developer.gocardless.com/api-reference/#making-requests-idempotency-keys
            </summary>
        </member>
        <member name="T:GoCardless.Services.CreditorBankAccountListRequest">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
            creditor bank accounts.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountListRequest.After">
            <summary>
            Cursor pointing to the start of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountListRequest.Before">
            <summary>
            Cursor pointing to the end of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountListRequest.CreatedAt">
            <summary>
            Limit to records created within certain times.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CreditorBankAccountListRequest.CreatedAtParam">
            <summary>
            Specify filters to limit records by creation time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountListRequest.CreatedAtParam.GreaterThan">
            <summary>
            Limit to records created after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountListRequest.CreatedAtParam.GreaterThanOrEqual">
            <summary>
            Limit to records created on or after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountListRequest.CreatedAtParam.LessThan">
            <summary>
            Limit to records created before the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountListRequest.CreatedAtParam.LessThanOrEqual">
             <summary>
            Limit to records created on or before the specified date-time.
             </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountListRequest.Creditor">
            <summary>
            Unique identifier, beginning with "CR".
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountListRequest.Enabled">
            <summary>
            Boolean value showing whether the bank account is enabled or
            disabled
            </summary>
        </member>
        <member name="T:GoCardless.Services.CreditorBankAccountListRequest.CreditorBankAccountEnabled">
            <summary>
            Boolean value showing whether the bank account is enabled or
            disabled
            </summary>
        </member>
        <member name="F:GoCardless.Services.CreditorBankAccountListRequest.CreditorBankAccountEnabled.True">
            <summary>`enabled` with a value of "true"</summary>
        </member>
        <member name="F:GoCardless.Services.CreditorBankAccountListRequest.CreditorBankAccountEnabled.False">
            <summary>`enabled` with a value of "false"</summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountListRequest.Limit">
            <summary>
            Number of records to return.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CreditorBankAccountGetRequest">
            <summary>
            Retrieves the details of an existing creditor bank account.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CreditorBankAccountDisableRequest">
            <summary>
            Immediately disables the bank account, no money can be paid out to a
            disabled account.
            
            This will return a `disable_failed` error if the bank account has
            already been disabled.
            
            A disabled bank account can be re-enabled by creating a new bank account
            resource with the same details.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CreditorBankAccountResponse">
            <summary>
            An API response for a request returning a single creditor bank account.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountResponse.CreditorBankAccount">
            <summary>
            The creditor bank account from the response.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CreditorBankAccountListResponse">
            <summary>
            An API response for a request returning a list of creditor bank accounts.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountListResponse.CreditorBankAccounts">
            <summary>
            The list of creditor bank accounts from the response.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorBankAccountListResponse.Meta">
            <summary>
            Response metadata (e.g. pagination cursors)
            </summary>
        </member>
        <member name="T:GoCardless.Services.CreditorService">
             <summary>
             Service class for working with creditor resources.
            
             Each [payment](#core-endpoints-payments) taken through the API is linked
             to a "creditor", to whom the payment is then paid out. In most cases
             your organisation will have a single "creditor", but the API also
             supports collecting payments on behalf of others.
             
             Please get in touch if you wish to use this endpoint. Currently, for
             Anti Money Laundering reasons, any creditors you add must be directly
             related to your organisation.
             </summary>
        </member>
        <member name="M:GoCardless.Services.CreditorService.#ctor(GoCardless.GoCardlessClient)">
            <summary>
            Constructor. Users of this library should not call this. An instance of this
            class can be accessed through an initialised GoCardlessClient.
            </summary>
        </member>
        <member name="M:GoCardless.Services.CreditorService.CreateAsync(GoCardless.Services.CreditorCreateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Creates a new creditor.
            </summary>
            <param name="request">An optional `CreditorCreateRequest` representing the body for this create request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single creditor resource</returns>
        </member>
        <member name="M:GoCardless.Services.CreditorService.ListAsync(GoCardless.Services.CreditorListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of
            your creditors.
            </summary>
            <param name="request">An optional `CreditorListRequest` representing the query parameters for this list request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A set of creditor resources</returns>
        </member>
        <member name="M:GoCardless.Services.CreditorService.All(GoCardless.Services.CreditorListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of creditors.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.CreditorService.AllAsync(GoCardless.Services.CreditorListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of creditors.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.CreditorService.GetAsync(System.String,GoCardless.Services.CreditorGetRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Retrieves the details of an existing creditor.
            </summary>
            <param name="identity">Unique identifier, beginning with "CR".</param>
            <param name="request">An optional `CreditorGetRequest` representing the query parameters for this get request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single creditor resource</returns>
        </member>
        <member name="M:GoCardless.Services.CreditorService.UpdateAsync(System.String,GoCardless.Services.CreditorUpdateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Updates a creditor object. Supports all of the fields supported when
            creating a creditor.
            </summary>
            <param name="identity">Unique identifier, beginning with "CR".</param>
            <param name="request">An optional `CreditorUpdateRequest` representing the body for this update request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single creditor resource</returns>
        </member>
        <member name="T:GoCardless.Services.CreditorCreateRequest">
            <summary>
            Creates a new creditor.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorCreateRequest.AddressLine1">
            <summary>
            The first line of the creditor's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorCreateRequest.AddressLine2">
            <summary>
            The second line of the creditor's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorCreateRequest.AddressLine3">
            <summary>
            The third line of the creditor's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorCreateRequest.City">
            <summary>
            The city of the creditor's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorCreateRequest.CountryCode">
            <summary>
            [ISO
            3166-1](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)
            alpha-2 code.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorCreateRequest.Links">
            <summary>
            Linked resources.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorCreateRequest.Name">
            <summary>
            The creditor's name.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorCreateRequest.PostalCode">
            <summary>
            The creditor's postal code.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorCreateRequest.Region">
            <summary>
            The creditor's address region, county or department.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorCreateRequest.IdempotencyKey">
            <summary>
            A unique key to ensure that this request only succeeds once, allowing you to safely retry request errors such as network failures.
            Any requests, where supported, to create a resource with a key that has previously been used will not succeed.
            See: https://developer.gocardless.com/api-reference/#making-requests-idempotency-keys
            </summary>
        </member>
        <member name="T:GoCardless.Services.CreditorListRequest">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
            creditors.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorListRequest.After">
            <summary>
            Cursor pointing to the start of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorListRequest.Before">
            <summary>
            Cursor pointing to the end of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorListRequest.CreatedAt">
            <summary>
            Limit to records created within certain times.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CreditorListRequest.CreatedAtParam">
            <summary>
            Specify filters to limit records by creation time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorListRequest.CreatedAtParam.GreaterThan">
            <summary>
            Limit to records created after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorListRequest.CreatedAtParam.GreaterThanOrEqual">
            <summary>
            Limit to records created on or after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorListRequest.CreatedAtParam.LessThan">
            <summary>
            Limit to records created before the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorListRequest.CreatedAtParam.LessThanOrEqual">
             <summary>
            Limit to records created on or before the specified date-time.
             </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorListRequest.Limit">
            <summary>
            Number of records to return.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CreditorGetRequest">
            <summary>
            Retrieves the details of an existing creditor.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CreditorUpdateRequest">
            <summary>
            Updates a creditor object. Supports all of the fields supported when
            creating a creditor.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorUpdateRequest.AddressLine1">
            <summary>
            The first line of the creditor's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorUpdateRequest.AddressLine2">
            <summary>
            The second line of the creditor's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorUpdateRequest.AddressLine3">
            <summary>
            The third line of the creditor's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorUpdateRequest.City">
            <summary>
            The city of the creditor's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorUpdateRequest.CountryCode">
            <summary>
            [ISO
            3166-1](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)
            alpha-2 code.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorUpdateRequest.Links">
            <summary>
            Linked resources.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CreditorUpdateRequest.CreditorLinks">
            <summary>
            Linked resources for a Creditor.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorUpdateRequest.CreditorLinks.DefaultEurPayoutAccount">
            <summary>
            ID of the [bank account](#core-endpoints-creditor-bank-accounts)
            which is set up to receive payouts in EUR.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorUpdateRequest.CreditorLinks.DefaultGbpPayoutAccount">
            <summary>
            ID of the [bank account](#core-endpoints-creditor-bank-accounts)
            which is set up to receive payouts in GBP.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorUpdateRequest.CreditorLinks.DefaultSekPayoutAccount">
            <summary>
            ID of the [bank account](#core-endpoints-creditor-bank-accounts)
            which is set up to receive payouts in SEK.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorUpdateRequest.Name">
            <summary>
            The creditor's name.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorUpdateRequest.PostalCode">
            <summary>
            The creditor's postal code.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorUpdateRequest.Region">
            <summary>
            The creditor's address region, county or department.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CreditorResponse">
            <summary>
            An API response for a request returning a single creditor.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorResponse.Creditor">
            <summary>
            The creditor from the response.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CreditorListResponse">
            <summary>
            An API response for a request returning a list of creditors.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorListResponse.Creditors">
            <summary>
            The list of creditors from the response.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CreditorListResponse.Meta">
            <summary>
            Response metadata (e.g. pagination cursors)
            </summary>
        </member>
        <member name="T:GoCardless.Services.CustomerBankAccountService">
             <summary>
             Service class for working with customer bank account resources.
            
             Customer Bank Accounts hold the bank details of a
             [customer](#core-endpoints-customers). They always belong to a
             [customer](#core-endpoints-customers), and may be linked to several
             Direct Debit [mandates](#core-endpoints-mandates).
             
             Note that customer bank accounts must be unique, and so you will
             encounter a `bank_account_exists` error if you try to create a duplicate
             bank account. You may wish to handle this by updating the existing
             record instead, the ID of which will be provided as
             `links[customer_bank_account]` in the error response.
             </summary>
        </member>
        <member name="M:GoCardless.Services.CustomerBankAccountService.#ctor(GoCardless.GoCardlessClient)">
            <summary>
            Constructor. Users of this library should not call this. An instance of this
            class can be accessed through an initialised GoCardlessClient.
            </summary>
        </member>
        <member name="M:GoCardless.Services.CustomerBankAccountService.CreateAsync(GoCardless.Services.CustomerBankAccountCreateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Creates a new customer bank account object.
            
            There are three different ways to supply bank account details:
            
            - [Local details](#appendix-local-bank-details)
            
            - IBAN
            
            - [Customer Bank Account
            Tokens](#javascript-flow-create-a-customer-bank-account-token)
            
            For more information on the different fields required in each
            country, see [local bank details](#appendix-local-bank-details).
            </summary>
            <param name="request">An optional `CustomerBankAccountCreateRequest` representing the body for this create request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single customer bank account resource</returns>
        </member>
        <member name="M:GoCardless.Services.CustomerBankAccountService.ListAsync(GoCardless.Services.CustomerBankAccountListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of
            your bank accounts.
            </summary>
            <param name="request">An optional `CustomerBankAccountListRequest` representing the query parameters for this list request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A set of customer bank account resources</returns>
        </member>
        <member name="M:GoCardless.Services.CustomerBankAccountService.All(GoCardless.Services.CustomerBankAccountListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of customer bank accounts.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.CustomerBankAccountService.AllAsync(GoCardless.Services.CustomerBankAccountListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of customer bank accounts.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.CustomerBankAccountService.GetAsync(System.String,GoCardless.Services.CustomerBankAccountGetRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Retrieves the details of an existing bank account.
            </summary>
            <param name="identity">Unique identifier, beginning with "BA".</param>
            <param name="request">An optional `CustomerBankAccountGetRequest` representing the query parameters for this get request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single customer bank account resource</returns>
        </member>
        <member name="M:GoCardless.Services.CustomerBankAccountService.UpdateAsync(System.String,GoCardless.Services.CustomerBankAccountUpdateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Updates a customer bank account object. Only the metadata parameter
            is allowed.
            </summary>
            <param name="identity">Unique identifier, beginning with "BA".</param>
            <param name="request">An optional `CustomerBankAccountUpdateRequest` representing the body for this update request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single customer bank account resource</returns>
        </member>
        <member name="M:GoCardless.Services.CustomerBankAccountService.DisableAsync(System.String,GoCardless.Services.CustomerBankAccountDisableRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Immediately cancels all associated mandates and cancellable
            payments.
            
            This will return a `disable_failed` error if the bank account has
            already been disabled.
            
            A disabled bank account can be re-enabled by creating a new bank
            account resource with the same details.
            </summary>
            <param name="identity">Unique identifier, beginning with "BA".</param>
            <param name="request">An optional `CustomerBankAccountDisableRequest` representing the body for this disable request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single customer bank account resource</returns>
        </member>
        <member name="T:GoCardless.Services.CustomerBankAccountCreateRequest">
            <summary>
            Creates a new customer bank account object.
            
            There are three different ways to supply bank account details:
            
            - [Local details](#appendix-local-bank-details)
            
            - IBAN
            
            - [Customer Bank Account
            Tokens](#javascript-flow-create-a-customer-bank-account-token)
            
            For more information on the different fields required in each country,
            see [local bank details](#appendix-local-bank-details).
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountCreateRequest.AccountHolderName">
            <summary>
            Name of the account holder, as known by the bank. Usually this
            matches the name of the linked
            [customer](#core-endpoints-customers). This field will be
            transliterated, upcased and truncated to 18 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountCreateRequest.AccountNumber">
            <summary>
            Bank account number - see [local
            details](#appendix-local-bank-details) for more information.
            Alternatively you can provide an `iban`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountCreateRequest.BankCode">
            <summary>
            Bank code - see [local details](#appendix-local-bank-details) for
            more information.  Alternatively you can provide an `iban`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountCreateRequest.BranchCode">
            <summary>
            Branch code - see [local details](#appendix-local-bank-details) for
            more information. Alternatively you can provide an `iban`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountCreateRequest.CountryCode">
            <summary>
            [ISO
            3166-1](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)
            alpha-2 code. Defaults to the country code of the `iban` if
            supplied, otherwise is required.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountCreateRequest.Currency">
            <summary>
            [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217#Active_codes)
            currency code, defaults to national currency of `country_code`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountCreateRequest.Iban">
            <summary>
            International Bank Account Number. Alternatively you can provide
            [local details](#appendix-local-bank-details). IBANs are not
            accepted for Swedish bank accounts denominated in SEK - you must
            supply [local details](#local-bank-details-sweden).
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountCreateRequest.Links">
            <summary>
            Linked resources.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CustomerBankAccountCreateRequest.CustomerBankAccountLinks">
            <summary>
            Linked resources for a CustomerBankAccount.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountCreateRequest.CustomerBankAccountLinks.Customer">
            <summary>
            ID of the [customer](#core-endpoints-customers) that owns this
            bank account.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountCreateRequest.CustomerBankAccountLinks.CustomerBankAccountToken">
            <summary>
            ID of a [customer bank account
            token](#javascript-flow-customer-bank-account-tokens) to use in
            place of bank account parameters.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountCreateRequest.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountCreateRequest.IdempotencyKey">
            <summary>
            A unique key to ensure that this request only succeeds once, allowing you to safely retry request errors such as network failures.
            Any requests, where supported, to create a resource with a key that has previously been used will not succeed.
            See: https://developer.gocardless.com/api-reference/#making-requests-idempotency-keys
            </summary>
        </member>
        <member name="T:GoCardless.Services.CustomerBankAccountListRequest">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
            bank accounts.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountListRequest.After">
            <summary>
            Cursor pointing to the start of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountListRequest.Before">
            <summary>
            Cursor pointing to the end of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountListRequest.CreatedAt">
            <summary>
            Limit to records created within certain times.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CustomerBankAccountListRequest.CreatedAtParam">
            <summary>
            Specify filters to limit records by creation time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountListRequest.CreatedAtParam.GreaterThan">
            <summary>
            Limit to records created after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountListRequest.CreatedAtParam.GreaterThanOrEqual">
            <summary>
            Limit to records created on or after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountListRequest.CreatedAtParam.LessThan">
            <summary>
            Limit to records created before the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountListRequest.CreatedAtParam.LessThanOrEqual">
             <summary>
            Limit to records created on or before the specified date-time.
             </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountListRequest.Customer">
            <summary>
            Unique identifier, beginning with "CU".
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountListRequest.Enabled">
            <summary>
            Get enabled or disabled customer bank accounts.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CustomerBankAccountListRequest.CustomerBankAccountEnabled">
            <summary>
            Get enabled or disabled customer bank accounts.
            </summary>
        </member>
        <member name="F:GoCardless.Services.CustomerBankAccountListRequest.CustomerBankAccountEnabled.True">
            <summary>`enabled` with a value of "true"</summary>
        </member>
        <member name="F:GoCardless.Services.CustomerBankAccountListRequest.CustomerBankAccountEnabled.False">
            <summary>`enabled` with a value of "false"</summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountListRequest.Limit">
            <summary>
            Number of records to return.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CustomerBankAccountGetRequest">
            <summary>
            Retrieves the details of an existing bank account.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CustomerBankAccountUpdateRequest">
            <summary>
            Updates a customer bank account object. Only the metadata parameter is
            allowed.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountUpdateRequest.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CustomerBankAccountDisableRequest">
            <summary>
            Immediately cancels all associated mandates and cancellable payments.
            
            This will return a `disable_failed` error if the bank account has
            already been disabled.
            
            A disabled bank account can be re-enabled by creating a new bank account
            resource with the same details.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CustomerBankAccountResponse">
            <summary>
            An API response for a request returning a single customer bank account.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountResponse.CustomerBankAccount">
            <summary>
            The customer bank account from the response.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CustomerBankAccountListResponse">
            <summary>
            An API response for a request returning a list of customer bank accounts.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountListResponse.CustomerBankAccounts">
            <summary>
            The list of customer bank accounts from the response.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerBankAccountListResponse.Meta">
            <summary>
            Response metadata (e.g. pagination cursors)
            </summary>
        </member>
        <member name="T:GoCardless.Services.CustomerService">
             <summary>
             Service class for working with customer resources.
            
             Customer objects hold the contact details for a customer. A customer can
             have several [customer bank
             accounts](#core-endpoints-customer-bank-accounts), which in turn can
             have several Direct Debit [mandates](#core-endpoints-mandates).
             
             Note: the `swedish_identity_number` field may only be supplied for
             Swedish customers, and must be supplied if you intend to set up an
             Autogiro mandate with the customer.
             </summary>
        </member>
        <member name="M:GoCardless.Services.CustomerService.#ctor(GoCardless.GoCardlessClient)">
            <summary>
            Constructor. Users of this library should not call this. An instance of this
            class can be accessed through an initialised GoCardlessClient.
            </summary>
        </member>
        <member name="M:GoCardless.Services.CustomerService.CreateAsync(GoCardless.Services.CustomerCreateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Creates a new customer object.
            </summary>
            <param name="request">An optional `CustomerCreateRequest` representing the body for this create request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single customer resource</returns>
        </member>
        <member name="M:GoCardless.Services.CustomerService.ListAsync(GoCardless.Services.CustomerListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of
            your customers.
            </summary>
            <param name="request">An optional `CustomerListRequest` representing the query parameters for this list request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A set of customer resources</returns>
        </member>
        <member name="M:GoCardless.Services.CustomerService.All(GoCardless.Services.CustomerListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of customers.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.CustomerService.AllAsync(GoCardless.Services.CustomerListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of customers.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.CustomerService.GetAsync(System.String,GoCardless.Services.CustomerGetRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Retrieves the details of an existing customer.
            </summary>
            <param name="identity">Unique identifier, beginning with "CU".</param>
            <param name="request">An optional `CustomerGetRequest` representing the query parameters for this get request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single customer resource</returns>
        </member>
        <member name="M:GoCardless.Services.CustomerService.UpdateAsync(System.String,GoCardless.Services.CustomerUpdateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Updates a customer object. Supports all of the fields supported when
            creating a customer.
            </summary>
            <param name="identity">Unique identifier, beginning with "CU".</param>
            <param name="request">An optional `CustomerUpdateRequest` representing the body for this update request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single customer resource</returns>
        </member>
        <member name="T:GoCardless.Services.CustomerCreateRequest">
            <summary>
            Creates a new customer object.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerCreateRequest.AddressLine1">
            <summary>
            The first line of the customer's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerCreateRequest.AddressLine2">
            <summary>
            The second line of the customer's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerCreateRequest.AddressLine3">
            <summary>
            The third line of the customer's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerCreateRequest.City">
            <summary>
            The city of the customer's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerCreateRequest.CompanyName">
            <summary>
            Customer's company name. Required unless a `given_name` and
            `family_name` are provided.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerCreateRequest.CountryCode">
            <summary>
            [ISO
            3166-1](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)
            alpha-2 code.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerCreateRequest.Email">
            <summary>
            Customer's email address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerCreateRequest.FamilyName">
            <summary>
            Customer's surname. Required unless a `company_name` is provided.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerCreateRequest.GivenName">
            <summary>
            Customer's first name. Required unless a `company_name` is provided.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerCreateRequest.Language">
            <summary>
            [ISO 639-1](http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
            code. Used as the language for notification emails sent by
            GoCardless if your organisation does not send its own (see
            [compliance requirements](#appendix-compliance-requirements)).
            Currently only "en", "fr", "de", "pt", "es", "it", "nl", "sv" are
            supported. If this is not provided, the language will be chosen
            based on the `country_code` (if supplied) or default to "en".
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerCreateRequest.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerCreateRequest.PostalCode">
            <summary>
            The customer's postal code.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerCreateRequest.Region">
            <summary>
            The customer's address region, county or department.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerCreateRequest.SwedishIdentityNumber">
            <summary>
            For Swedish customers only. The civic/company number (personnummer,
            samordningsnummer, or organisationsnummer) of the customer. Must be
            supplied if the customer's bank account is denominated in Swedish
            krona (SEK). This field cannot be changed once it has been set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerCreateRequest.IdempotencyKey">
            <summary>
            A unique key to ensure that this request only succeeds once, allowing you to safely retry request errors such as network failures.
            Any requests, where supported, to create a resource with a key that has previously been used will not succeed.
            See: https://developer.gocardless.com/api-reference/#making-requests-idempotency-keys
            </summary>
        </member>
        <member name="T:GoCardless.Services.CustomerListRequest">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
            customers.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerListRequest.After">
            <summary>
            Cursor pointing to the start of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerListRequest.Before">
            <summary>
            Cursor pointing to the end of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerListRequest.CreatedAt">
            <summary>
            Limit to records created within certain times.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CustomerListRequest.CreatedAtParam">
            <summary>
            Specify filters to limit records by creation time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerListRequest.CreatedAtParam.GreaterThan">
            <summary>
            Limit to records created after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerListRequest.CreatedAtParam.GreaterThanOrEqual">
            <summary>
            Limit to records created on or after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerListRequest.CreatedAtParam.LessThan">
            <summary>
            Limit to records created before the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerListRequest.CreatedAtParam.LessThanOrEqual">
             <summary>
            Limit to records created on or before the specified date-time.
             </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerListRequest.Limit">
            <summary>
            Number of records to return.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CustomerGetRequest">
            <summary>
            Retrieves the details of an existing customer.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CustomerUpdateRequest">
            <summary>
            Updates a customer object. Supports all of the fields supported when
            creating a customer.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerUpdateRequest.AddressLine1">
            <summary>
            The first line of the customer's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerUpdateRequest.AddressLine2">
            <summary>
            The second line of the customer's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerUpdateRequest.AddressLine3">
            <summary>
            The third line of the customer's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerUpdateRequest.City">
            <summary>
            The city of the customer's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerUpdateRequest.CompanyName">
            <summary>
            Customer's company name. Required unless a `given_name` and
            `family_name` are provided.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerUpdateRequest.CountryCode">
            <summary>
            [ISO
            3166-1](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)
            alpha-2 code.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerUpdateRequest.Email">
            <summary>
            Customer's email address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerUpdateRequest.FamilyName">
            <summary>
            Customer's surname. Required unless a `company_name` is provided.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerUpdateRequest.GivenName">
            <summary>
            Customer's first name. Required unless a `company_name` is provided.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerUpdateRequest.Language">
            <summary>
            [ISO 639-1](http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
            code. Used as the language for notification emails sent by
            GoCardless if your organisation does not send its own (see
            [compliance requirements](#appendix-compliance-requirements)).
            Currently only "en", "fr", "de", "pt", "es", "it", "nl", "sv" are
            supported. If this is not provided, the language will be chosen
            based on the `country_code` (if supplied) or default to "en".
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerUpdateRequest.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerUpdateRequest.PostalCode">
            <summary>
            The customer's postal code.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerUpdateRequest.Region">
            <summary>
            The customer's address region, county or department.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerUpdateRequest.SwedishIdentityNumber">
            <summary>
            For Swedish customers only. The civic/company number (personnummer,
            samordningsnummer, or organisationsnummer) of the customer. Must be
            supplied if the customer's bank account is denominated in Swedish
            krona (SEK). This field cannot be changed once it has been set.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CustomerResponse">
            <summary>
            An API response for a request returning a single customer.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerResponse.Customer">
            <summary>
            The customer from the response.
            </summary>
        </member>
        <member name="T:GoCardless.Services.CustomerListResponse">
            <summary>
            An API response for a request returning a list of customers.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerListResponse.Customers">
            <summary>
            The list of customers from the response.
            </summary>
        </member>
        <member name="P:GoCardless.Services.CustomerListResponse.Meta">
            <summary>
            Response metadata (e.g. pagination cursors)
            </summary>
        </member>
        <member name="T:GoCardless.Services.EventService">
             <summary>
             Service class for working with event resources.
            
             Events are stored for all webhooks. An event refers to a resource which
             has been updated, for example a payment which has been collected, or a
             mandate which has been transferred.
             </summary>
        </member>
        <member name="M:GoCardless.Services.EventService.#ctor(GoCardless.GoCardlessClient)">
            <summary>
            Constructor. Users of this library should not call this. An instance of this
            class can be accessed through an initialised GoCardlessClient.
            </summary>
        </member>
        <member name="M:GoCardless.Services.EventService.ListAsync(GoCardless.Services.EventListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of
            your events.
            </summary>
            <param name="request">An optional `EventListRequest` representing the query parameters for this list request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A set of event resources</returns>
        </member>
        <member name="M:GoCardless.Services.EventService.All(GoCardless.Services.EventListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of events.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.EventService.AllAsync(GoCardless.Services.EventListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of events.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.EventService.GetAsync(System.String,GoCardless.Services.EventGetRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Retrieves the details of a single event.
            </summary>
            <param name="identity">Unique identifier, beginning with "EV".</param>
            <param name="request">An optional `EventGetRequest` representing the query parameters for this get request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single event resource</returns>
        </member>
        <member name="T:GoCardless.Services.EventListRequest">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
            events.
            </summary>
        </member>
        <member name="P:GoCardless.Services.EventListRequest.Action">
            <summary>
            Limit to events with a given `action`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.EventListRequest.After">
            <summary>
            Cursor pointing to the start of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.EventListRequest.Before">
            <summary>
            Cursor pointing to the end of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.EventListRequest.CreatedAt">
            <summary>
            Limit to records created within certain times.
            </summary>
        </member>
        <member name="T:GoCardless.Services.EventListRequest.CreatedAtParam">
            <summary>
            Specify filters to limit records by creation time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.EventListRequest.CreatedAtParam.GreaterThan">
            <summary>
            Limit to records created after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.EventListRequest.CreatedAtParam.GreaterThanOrEqual">
            <summary>
            Limit to records created on or after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.EventListRequest.CreatedAtParam.LessThan">
            <summary>
            Limit to records created before the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.EventListRequest.CreatedAtParam.LessThanOrEqual">
             <summary>
            Limit to records created on or before the specified date-time.
             </summary>
        </member>
        <member name="P:GoCardless.Services.EventListRequest.Include">
            <summary>
            Includes linked resources in the response. Must be used with the
            `resource_type` parameter specified. The include should be one of:
            <ul>
            <li>`payment`</li>
            <li>`mandate`</li>
            <li>`payout`</li>
            <li>`refund`</li>
            <li>`subscription`</li>
            </ul>
            </summary>
        </member>
        <member name="T:GoCardless.Services.EventListRequest.EventInclude">
            <summary>
            Includes linked resources in the response. Must be used with the
            `resource_type` parameter specified. The include should be one of:
            <ul>
            <li>`payment`</li>
            <li>`mandate`</li>
            <li>`payout`</li>
            <li>`refund`</li>
            <li>`subscription`</li>
            </ul>
            </summary>
        </member>
        <member name="F:GoCardless.Services.EventListRequest.EventInclude.Payment">
            <summary>`include` with a value of "payment"</summary>
        </member>
        <member name="F:GoCardless.Services.EventListRequest.EventInclude.Mandate">
            <summary>`include` with a value of "mandate"</summary>
        </member>
        <member name="F:GoCardless.Services.EventListRequest.EventInclude.Payout">
            <summary>`include` with a value of "payout"</summary>
        </member>
        <member name="F:GoCardless.Services.EventListRequest.EventInclude.Refund">
            <summary>`include` with a value of "refund"</summary>
        </member>
        <member name="F:GoCardless.Services.EventListRequest.EventInclude.Subscription">
            <summary>`include` with a value of "subscription"</summary>
        </member>
        <member name="P:GoCardless.Services.EventListRequest.Limit">
            <summary>
            Number of records to return.
            </summary>
        </member>
        <member name="P:GoCardless.Services.EventListRequest.Mandate">
            <summary>
            ID of a [mandate](#core-endpoints-mandates). If specified, this
            endpoint will return all events for the given mandate.
            </summary>
        </member>
        <member name="P:GoCardless.Services.EventListRequest.ParentEvent">
            <summary>
            ID of an event. If specified, this endpint will return all events
            whose parent_event is the given event ID.
            </summary>
        </member>
        <member name="P:GoCardless.Services.EventListRequest.Payment">
            <summary>
            ID of a [payment](#core-endpoints-payments). If specified, this
            endpoint will return all events for the given payment.
            </summary>
        </member>
        <member name="P:GoCardless.Services.EventListRequest.Payout">
            <summary>
            ID of a [payout](#core-endpoints-payouts). If specified, this
            endpoint will return all events for the given payout.
            </summary>
        </member>
        <member name="P:GoCardless.Services.EventListRequest.Refund">
            <summary>
            ID of a [refund](#core-endpoints-refunds). If specified, this
            endpoint will return all events for the given refund.
            </summary>
        </member>
        <member name="P:GoCardless.Services.EventListRequest.ResourceType">
            <summary>
            Type of resource that you'd like to get all events for. Cannot be
            used together with the `payment`, `mandate`, `subscription`,
            `refund` or `payout` parameter. The type can be one of:
            <ul>
            <li>`payments`</li>
            <li>`mandates`</li>
            <li>`payouts`</li>
            <li>`subscriptions`</li>
            <li>`refunds`</li>
            </ul>
            </summary>
        </member>
        <member name="T:GoCardless.Services.EventListRequest.EventResourceType">
            <summary>
            Type of resource that you'd like to get all events for. Cannot be
            used together with the `payment`, `mandate`, `subscription`,
            `refund` or `payout` parameter. The type can be one of:
            <ul>
            <li>`payments`</li>
            <li>`mandates`</li>
            <li>`payouts`</li>
            <li>`subscriptions`</li>
            <li>`refunds`</li>
            </ul>
            </summary>
        </member>
        <member name="F:GoCardless.Services.EventListRequest.EventResourceType.Payments">
            <summary>`resource_type` with a value of "payments"</summary>
        </member>
        <member name="F:GoCardless.Services.EventListRequest.EventResourceType.Mandates">
            <summary>`resource_type` with a value of "mandates"</summary>
        </member>
        <member name="F:GoCardless.Services.EventListRequest.EventResourceType.Payouts">
            <summary>`resource_type` with a value of "payouts"</summary>
        </member>
        <member name="F:GoCardless.Services.EventListRequest.EventResourceType.Refunds">
            <summary>`resource_type` with a value of "refunds"</summary>
        </member>
        <member name="F:GoCardless.Services.EventListRequest.EventResourceType.Subscriptions">
            <summary>`resource_type` with a value of "subscriptions"</summary>
        </member>
        <member name="P:GoCardless.Services.EventListRequest.Subscription">
            <summary>
            ID of a [subscription](#core-endpoints-subscriptions). If specified,
            this endpoint will return all events for the given subscription.
            </summary>
        </member>
        <member name="T:GoCardless.Services.EventGetRequest">
            <summary>
            Retrieves the details of a single event.
            </summary>
        </member>
        <member name="T:GoCardless.Services.EventResponse">
            <summary>
            An API response for a request returning a single event.
            </summary>
        </member>
        <member name="P:GoCardless.Services.EventResponse.Event">
            <summary>
            The event from the response.
            </summary>
        </member>
        <member name="T:GoCardless.Services.EventListResponse">
            <summary>
            An API response for a request returning a list of events.
            </summary>
        </member>
        <member name="P:GoCardless.Services.EventListResponse.Events">
            <summary>
            The list of events from the response.
            </summary>
        </member>
        <member name="P:GoCardless.Services.EventListResponse.Meta">
            <summary>
            Response metadata (e.g. pagination cursors)
            </summary>
        </member>
        <member name="T:GoCardless.Services.MandatePdfService">
             <summary>
             Service class for working with mandate pdf resources.
            
             Mandate PDFs allow you to easily display [scheme-rules
             compliant](#appendix-compliance-requirements) Direct Debit mandates to
             your customers.
             </summary>
        </member>
        <member name="M:GoCardless.Services.MandatePdfService.#ctor(GoCardless.GoCardlessClient)">
            <summary>
            Constructor. Users of this library should not call this. An instance of this
            class can be accessed through an initialised GoCardlessClient.
            </summary>
        </member>
        <member name="M:GoCardless.Services.MandatePdfService.CreateAsync(GoCardless.Services.MandatePdfCreateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Generates a PDF mandate and returns its temporary URL.
            
            Customer and bank account details can be left blank (for a blank
            mandate), provided manually, or inferred from the ID of an existing
            [mandate](#core-endpoints-mandates).
            
            To generate a PDF mandate in a foreign language, set your
            `Accept-Language` header to the relevant [ISO
            639-1](http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes#Partial_ISO_639_table)
            language code. Supported languages are Dutch, English, French,
            German, Italian, Portuguese, Spanish and Swedish.
            </summary>
            <param name="request">An optional `MandatePdfCreateRequest` representing the body for this create request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single mandate pdf resource</returns>
        </member>
        <member name="T:GoCardless.Services.MandatePdfCreateRequest">
            <summary>
            Generates a PDF mandate and returns its temporary URL.
            
            Customer and bank account details can be left blank (for a blank
            mandate), provided manually, or inferred from the ID of an existing
            [mandate](#core-endpoints-mandates).
            
            To generate a PDF mandate in a foreign language, set your
            `Accept-Language` header to the relevant [ISO
            639-1](http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes#Partial_ISO_639_table)
            language code. Supported languages are Dutch, English, French, German,
            Italian, Portuguese, Spanish and Swedish.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandatePdfCreateRequest.AccountHolderName">
            <summary>
            Name of the account holder, as known by the bank. Usually this
            matches the name of the [customer](#core-endpoints-customers). This
            field cannot exceed 18 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandatePdfCreateRequest.AccountNumber">
            <summary>
            Bank account number - see [local
            details](#appendix-local-bank-details) for more information.
            Alternatively you can provide an `iban`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandatePdfCreateRequest.BankCode">
            <summary>
            Bank code - see [local details](#appendix-local-bank-details) for
            more information. Alternatively you can provide an `iban`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandatePdfCreateRequest.Bic">
            <summary>
            SWIFT BIC. Will be derived automatically if a valid `iban` or [local
            details](#appendix-local-bank-details) are provided.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandatePdfCreateRequest.BranchCode">
            <summary>
            Branch code - see [local details](#appendix-local-bank-details) for
            more information. Alternatively you can provide an `iban`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandatePdfCreateRequest.CountryCode">
            <summary>
            [ISO
            3166-1](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)
            alpha-2 code. Required if providing local details.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandatePdfCreateRequest.Iban">
            <summary>
            International Bank Account Number. Alternatively you can provide
            [local details](#appendix-local-bank-details). IBANs cannot be
            provided for Autogiro mandates.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandatePdfCreateRequest.Links">
            <summary>
            Linked resources.
            </summary>
        </member>
        <member name="T:GoCardless.Services.MandatePdfCreateRequest.MandatePdfLinks">
            <summary>
            Linked resources for a MandatePdf.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandatePdfCreateRequest.MandatePdfLinks.Mandate">
            <summary>
            ID of an existing [mandate](#core-endpoints-mandates) to build
            the PDF from. The customer's bank details will be censored in
            the generated PDF. No other parameters may be provided alongside
            this.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandatePdfCreateRequest.MandateReference">
            <summary>
            Unique 6 to 18 character reference. This may be left blank at the
            point of signing.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandatePdfCreateRequest.Scheme">
            <summary>
            Direct Debit scheme. Can be supplied or automatically detected from
            the bank account details provided. If you do not provide a scheme,
            you must provide either a mandate, an `iban`, or [local
            details](#appendix-local-bank-details) including a `country_code`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandatePdfCreateRequest.SignatureDate">
            <summary>
            If provided, a form will be generated with this date and no
            signature field.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandatePdfCreateRequest.SwedishIdentityNumber">
            <summary>
            For Swedish customers only. The civic/company number (personnummer,
            samordningsnummer, or organisationsnummer) of the customer. Can only
            be supplied for Autogiro mandates.
            </summary>
        </member>
        <member name="T:GoCardless.Services.MandatePdfResponse">
            <summary>
            An API response for a request returning a single mandate pdf.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandatePdfResponse.MandatePdf">
            <summary>
            The mandate pdf from the response.
            </summary>
        </member>
        <member name="T:GoCardless.Services.MandateService">
             <summary>
             Service class for working with mandate resources.
            
             Mandates represent the Direct Debit mandate with a
             [customer](#core-endpoints-customers).
             
             GoCardless will notify you via a [webhook](#appendix-webhooks) whenever
             the status of a mandate changes.
             </summary>
        </member>
        <member name="M:GoCardless.Services.MandateService.#ctor(GoCardless.GoCardlessClient)">
            <summary>
            Constructor. Users of this library should not call this. An instance of this
            class can be accessed through an initialised GoCardlessClient.
            </summary>
        </member>
        <member name="M:GoCardless.Services.MandateService.CreateAsync(GoCardless.Services.MandateCreateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Creates a new mandate object.
            </summary>
            <param name="request">An optional `MandateCreateRequest` representing the body for this create request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single mandate resource</returns>
        </member>
        <member name="M:GoCardless.Services.MandateService.ListAsync(GoCardless.Services.MandateListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of
            your mandates.
            </summary>
            <param name="request">An optional `MandateListRequest` representing the query parameters for this list request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A set of mandate resources</returns>
        </member>
        <member name="M:GoCardless.Services.MandateService.All(GoCardless.Services.MandateListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of mandates.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.MandateService.AllAsync(GoCardless.Services.MandateListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of mandates.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.MandateService.GetAsync(System.String,GoCardless.Services.MandateGetRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Retrieves the details of an existing mandate.
            </summary>
            <param name="identity">Unique identifier, beginning with "MD".</param>
            <param name="request">An optional `MandateGetRequest` representing the query parameters for this get request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single mandate resource</returns>
        </member>
        <member name="M:GoCardless.Services.MandateService.UpdateAsync(System.String,GoCardless.Services.MandateUpdateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Updates a mandate object. This accepts only the metadata parameter.
            </summary>
            <param name="identity">Unique identifier, beginning with "MD".</param>
            <param name="request">An optional `MandateUpdateRequest` representing the body for this update request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single mandate resource</returns>
        </member>
        <member name="M:GoCardless.Services.MandateService.CancelAsync(System.String,GoCardless.Services.MandateCancelRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Immediately cancels a mandate and all associated cancellable
            payments. Any metadata supplied to this endpoint will be stored on
            the mandate cancellation event it causes.
            
            This will fail with a `cancellation_failed` error if the mandate is
            already cancelled.
            </summary>
            <param name="identity">Unique identifier, beginning with "MD".</param>
            <param name="request">An optional `MandateCancelRequest` representing the body for this cancel request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single mandate resource</returns>
        </member>
        <member name="M:GoCardless.Services.MandateService.ReinstateAsync(System.String,GoCardless.Services.MandateReinstateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            <a name="mandate_not_inactive"></a>Reinstates a cancelled or expired
            mandate to the banks. You will receive a `resubmission_requested`
            webhook, but after that reinstating the mandate follows the same
            process as its initial creation, so you will receive a `submitted`
            webhook, followed by a `reinstated` or `failed` webhook up to two
            working days later. Any metadata supplied to this endpoint will be
            stored on the `resubmission_requested` event it causes.
            
            This will fail with a `mandate_not_inactive` error if the mandate is
            already being submitted, or is active.
            
            Mandates can be resubmitted up to 3 times.
            </summary>
            <param name="identity">Unique identifier, beginning with "MD".</param>
            <param name="request">An optional `MandateReinstateRequest` representing the body for this reinstate request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single mandate resource</returns>
        </member>
        <member name="T:GoCardless.Services.MandateCreateRequest">
            <summary>
            Creates a new mandate object.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateCreateRequest.Links">
            <summary>
            Linked resources.
            </summary>
        </member>
        <member name="T:GoCardless.Services.MandateCreateRequest.MandateLinks">
            <summary>
            Linked resources for a Mandate.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateCreateRequest.MandateLinks.Creditor">
            <summary>
            ID of the associated [creditor](#core-endpoints-creditors). Only
            required if your account manages multiple creditors.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateCreateRequest.MandateLinks.CustomerBankAccount">
            <summary>
            ID of the associated [customer bank
            account](#core-endpoints-customer-bank-accounts) which the
            mandate is created and submits payments against.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateCreateRequest.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateCreateRequest.Reference">
            <summary>
            Unique reference. Different schemes have different length and
            [character set](#appendix-character-sets) requirements. GoCardless
            will generate a unique reference satisfying the different scheme
            requirements if this field is left blank.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateCreateRequest.Scheme">
            <summary>
            <a name="mandates_scheme"></a>Direct Debit scheme to which this
            mandate and associated payments are submitted. Can be supplied or
            automatically detected from the customer's bank account. Currently
            only "autogiro", "bacs", and "sepa_core" are supported.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateCreateRequest.IdempotencyKey">
            <summary>
            A unique key to ensure that this request only succeeds once, allowing you to safely retry request errors such as network failures.
            Any requests, where supported, to create a resource with a key that has previously been used will not succeed.
            See: https://developer.gocardless.com/api-reference/#making-requests-idempotency-keys
            </summary>
        </member>
        <member name="T:GoCardless.Services.MandateListRequest">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
            mandates.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateListRequest.After">
            <summary>
            Cursor pointing to the start of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateListRequest.Before">
            <summary>
            Cursor pointing to the end of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateListRequest.CreatedAt">
            <summary>
            Limit to records created within certain times.
            </summary>
        </member>
        <member name="T:GoCardless.Services.MandateListRequest.CreatedAtParam">
            <summary>
            Specify filters to limit records by creation time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateListRequest.CreatedAtParam.GreaterThan">
            <summary>
            Limit to records created after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateListRequest.CreatedAtParam.GreaterThanOrEqual">
            <summary>
            Limit to records created on or after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateListRequest.CreatedAtParam.LessThan">
            <summary>
            Limit to records created before the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateListRequest.CreatedAtParam.LessThanOrEqual">
             <summary>
            Limit to records created on or before the specified date-time.
             </summary>
        </member>
        <member name="P:GoCardless.Services.MandateListRequest.Creditor">
            <summary>
            ID of a [creditor](#core-endpoints-creditors). If specified, this
            endpoint will return all mandates for the given creditor. Cannot be
            used in conjunction with `customer` or `customer_bank_account`
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateListRequest.Customer">
            <summary>
            ID of a [customer](#core-endpoints-customers). If specified, this
            endpoint will return all mandates for the given customer. Cannot be
            used in conjunction with `customer_bank_account` or `creditor`
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateListRequest.CustomerBankAccount">
            <summary>
            ID of a [customer bank
            account](#core-endpoints-customer-bank-accounts). If specified, this
            endpoint will return all mandates for the given bank account. Cannot
            be used in conjunction with `customer` or `creditor`
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateListRequest.Limit">
            <summary>
            Number of records to return.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateListRequest.Reference">
            <summary>
            Unique reference. Different schemes have different length and
            [character set](#appendix-character-sets) requirements. GoCardless
            will generate a unique reference satisfying the different scheme
            requirements if this field is left blank.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateListRequest.Status">
            <summary>
            At most three valid status values
            </summary>
        </member>
        <member name="T:GoCardless.Services.MandateListRequest.MandateStatus">
            <summary>
            One of:
            <ul>
            <li>`pending_customer_approval`: the mandate has not yet been signed
            by the second customer</li>
            <li>`pending_submission`: the mandate has not yet been submitted to
            the customer's bank</li>
            <li>`submitted`: the mandate has been submitted to the customer's
            bank but has not been processed yet</li>
            <li>`active`: the mandate has been successfully set up by the
            customer's bank</li>
            <li>`failed`: the mandate could not be created</li>
            <li>`cancelled`: the mandate has been cancelled</li>
            <li>`expired`: the mandate has expired due to dormancy</li>
            </ul>
            </summary>
        </member>
        <member name="F:GoCardless.Services.MandateListRequest.MandateStatus.PendingCustomerApproval">
            <summary>`status` with a value of "pending_customer_approval"</summary>
        </member>
        <member name="F:GoCardless.Services.MandateListRequest.MandateStatus.PendingSubmission">
            <summary>`status` with a value of "pending_submission"</summary>
        </member>
        <member name="F:GoCardless.Services.MandateListRequest.MandateStatus.Submitted">
            <summary>`status` with a value of "submitted"</summary>
        </member>
        <member name="F:GoCardless.Services.MandateListRequest.MandateStatus.Active">
            <summary>`status` with a value of "active"</summary>
        </member>
        <member name="F:GoCardless.Services.MandateListRequest.MandateStatus.Failed">
            <summary>`status` with a value of "failed"</summary>
        </member>
        <member name="F:GoCardless.Services.MandateListRequest.MandateStatus.Cancelled">
            <summary>`status` with a value of "cancelled"</summary>
        </member>
        <member name="F:GoCardless.Services.MandateListRequest.MandateStatus.Expired">
            <summary>`status` with a value of "expired"</summary>
        </member>
        <member name="T:GoCardless.Services.MandateGetRequest">
            <summary>
            Retrieves the details of an existing mandate.
            </summary>
        </member>
        <member name="T:GoCardless.Services.MandateUpdateRequest">
            <summary>
            Updates a mandate object. This accepts only the metadata parameter.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateUpdateRequest.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="T:GoCardless.Services.MandateCancelRequest">
            <summary>
            Immediately cancels a mandate and all associated cancellable payments.
            Any metadata supplied to this endpoint will be stored on the mandate
            cancellation event it causes.
            
            This will fail with a `cancellation_failed` error if the mandate is
            already cancelled.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateCancelRequest.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="T:GoCardless.Services.MandateReinstateRequest">
            <summary>
            <a name="mandate_not_inactive"></a>Reinstates a cancelled or expired
            mandate to the banks. You will receive a `resubmission_requested`
            webhook, but after that reinstating the mandate follows the same process
            as its initial creation, so you will receive a `submitted` webhook,
            followed by a `reinstated` or `failed` webhook up to two working days
            later. Any metadata supplied to this endpoint will be stored on the
            `resubmission_requested` event it causes.
            
            This will fail with a `mandate_not_inactive` error if the mandate is
            already being submitted, or is active.
            
            Mandates can be resubmitted up to 3 times.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateReinstateRequest.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="T:GoCardless.Services.MandateResponse">
            <summary>
            An API response for a request returning a single mandate.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateResponse.Mandate">
            <summary>
            The mandate from the response.
            </summary>
        </member>
        <member name="T:GoCardless.Services.MandateListResponse">
            <summary>
            An API response for a request returning a list of mandates.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateListResponse.Mandates">
            <summary>
            The list of mandates from the response.
            </summary>
        </member>
        <member name="P:GoCardless.Services.MandateListResponse.Meta">
            <summary>
            Response metadata (e.g. pagination cursors)
            </summary>
        </member>
        <member name="T:GoCardless.Services.PaymentService">
             <summary>
             Service class for working with payment resources.
            
             Payment objects represent payments from a
             [customer](#core-endpoints-customers) to a
             [creditor](#core-endpoints-creditors), taken against a Direct Debit
             [mandate](#core-endpoints-mandates).
             
             GoCardless will notify you via a [webhook](#appendix-webhooks) whenever
             the state of a payment changes.
             </summary>
        </member>
        <member name="M:GoCardless.Services.PaymentService.#ctor(GoCardless.GoCardlessClient)">
            <summary>
            Constructor. Users of this library should not call this. An instance of this
            class can be accessed through an initialised GoCardlessClient.
            </summary>
        </member>
        <member name="M:GoCardless.Services.PaymentService.CreateAsync(GoCardless.Services.PaymentCreateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            <a name="mandate_is_inactive"></a>Creates a new payment object.
            
            This fails with a `mandate_is_inactive` error if the linked
            [mandate](#core-endpoints-mandates) is cancelled or has failed.
            Payments can be created against mandates with status of:
            `pending_customer_approval`, `pending_submission`, `submitted`, and
            `active`.
            </summary>
            <param name="request">An optional `PaymentCreateRequest` representing the body for this create request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single payment resource</returns>
        </member>
        <member name="M:GoCardless.Services.PaymentService.ListAsync(GoCardless.Services.PaymentListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of
            your payments.
            </summary>
            <param name="request">An optional `PaymentListRequest` representing the query parameters for this list request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A set of payment resources</returns>
        </member>
        <member name="M:GoCardless.Services.PaymentService.All(GoCardless.Services.PaymentListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of payments.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.PaymentService.AllAsync(GoCardless.Services.PaymentListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of payments.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.PaymentService.GetAsync(System.String,GoCardless.Services.PaymentGetRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Retrieves the details of a single existing payment.
            </summary>
            <param name="identity">Unique identifier, beginning with "PM".</param>
            <param name="request">An optional `PaymentGetRequest` representing the query parameters for this get request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single payment resource</returns>
        </member>
        <member name="M:GoCardless.Services.PaymentService.UpdateAsync(System.String,GoCardless.Services.PaymentUpdateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Updates a payment object. This accepts only the metadata parameter.
            </summary>
            <param name="identity">Unique identifier, beginning with "PM".</param>
            <param name="request">An optional `PaymentUpdateRequest` representing the body for this update request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single payment resource</returns>
        </member>
        <member name="M:GoCardless.Services.PaymentService.CancelAsync(System.String,GoCardless.Services.PaymentCancelRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Cancels the payment if it has not already been submitted to the
            banks. Any metadata supplied to this endpoint will be stored on the
            payment cancellation event it causes.
            
            This will fail with a `cancellation_failed` error unless the
            payment's status is `pending_submission`.
            </summary>
            <param name="identity">Unique identifier, beginning with "PM".</param>
            <param name="request">An optional `PaymentCancelRequest` representing the body for this cancel request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single payment resource</returns>
        </member>
        <member name="M:GoCardless.Services.PaymentService.RetryAsync(System.String,GoCardless.Services.PaymentRetryRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            <a name="retry_failed"></a>Retries a failed payment if the
            underlying mandate is active. You will receive a
            `resubmission_requested` webhook, but after that retrying the
            payment follows the same process as its initial creation, so you
            will receive a `submitted` webhook, followed by a `confirmed` or
            `failed` event. Any metadata supplied to this endpoint will be
            stored against the payment submission event it causes.
            
            This will return a `retry_failed` error if the payment has not
            failed.
            
            Payments can be retried up to 3 times.
            </summary>
            <param name="identity">Unique identifier, beginning with "PM".</param>
            <param name="request">An optional `PaymentRetryRequest` representing the body for this retry request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single payment resource</returns>
        </member>
        <member name="T:GoCardless.Services.PaymentCreateRequest">
            <summary>
            <a name="mandate_is_inactive"></a>Creates a new payment object.
            
            This fails with a `mandate_is_inactive` error if the linked
            [mandate](#core-endpoints-mandates) is cancelled or has failed. Payments
            can be created against mandates with status of:
            `pending_customer_approval`, `pending_submission`, `submitted`, and
            `active`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentCreateRequest.Amount">
            <summary>
            Amount in pence (GBP), cents (EUR), or öre (SEK).
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentCreateRequest.AppFee">
            <summary>
            The amount to be deducted from the payment as the OAuth app's fee,
            in pence or cents.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentCreateRequest.ChargeDate">
            <summary>
            A future date on which the payment should be collected. If not
            specified, the payment will be collected as soon as possible. This
            must be on or after the [mandate](#core-endpoints-mandates)'s
            `next_possible_charge_date`, and will be rolled-forwards by
            GoCardless if it is not a working day.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentCreateRequest.Currency">
            <summary>
            [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217#Active_codes)
            currency code. Currently only "GBP", "EUR", and "SEK" are supported.
            </summary>
        </member>
        <member name="T:GoCardless.Services.PaymentCreateRequest.PaymentCurrency">
            <summary>
            [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217#Active_codes)
            currency code. Currently only "GBP", "EUR", and "SEK" are supported.
            </summary>
        </member>
        <member name="F:GoCardless.Services.PaymentCreateRequest.PaymentCurrency.GBP">
            <summary>`currency` with a value of "GBP"</summary>
        </member>
        <member name="F:GoCardless.Services.PaymentCreateRequest.PaymentCurrency.EUR">
            <summary>`currency` with a value of "EUR"</summary>
        </member>
        <member name="F:GoCardless.Services.PaymentCreateRequest.PaymentCurrency.SEK">
            <summary>`currency` with a value of "SEK"</summary>
        </member>
        <member name="P:GoCardless.Services.PaymentCreateRequest.Description">
            <summary>
            A human-readable description of the payment. This will be included
            in the notification email GoCardless sends to your customer if your
            organisation does not send its own notifications (see [compliance
            requirements](#appendix-compliance-requirements)).
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentCreateRequest.Links">
            <summary>
            Linked resources.
            </summary>
        </member>
        <member name="T:GoCardless.Services.PaymentCreateRequest.PaymentLinks">
            <summary>
            Linked resources for a Payment.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentCreateRequest.PaymentLinks.Mandate">
            <summary>
            ID of the [mandate](#core-endpoints-mandates) against which this
            payment should be collected.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentCreateRequest.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentCreateRequest.Reference">
            <summary>
            An optional payment reference that will appear on your customer's
            bank statement. For Bacs payments this can be up to 10 characters,
            for SEPA payments the limit is 140 characters, and for Autogiro
            payments the limit is 11 characters. <p
            class='restricted-notice'><strong>Restricted</strong>: You can only
            specify a payment reference for Bacs payments (that is, when
            collecting from the UK) if you're on the <a
            href='https://gocardless.com/pricing'>GoCardless Plus or Pro
            packages</a>.</p>
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentCreateRequest.IdempotencyKey">
            <summary>
            A unique key to ensure that this request only succeeds once, allowing you to safely retry request errors such as network failures.
            Any requests, where supported, to create a resource with a key that has previously been used will not succeed.
            See: https://developer.gocardless.com/api-reference/#making-requests-idempotency-keys
            </summary>
        </member>
        <member name="T:GoCardless.Services.PaymentListRequest">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
            payments.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentListRequest.After">
            <summary>
            Cursor pointing to the start of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentListRequest.Before">
            <summary>
            Cursor pointing to the end of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentListRequest.CreatedAt">
            <summary>
            Limit to records created within certain times.
            </summary>
        </member>
        <member name="T:GoCardless.Services.PaymentListRequest.CreatedAtParam">
            <summary>
            Specify filters to limit records by creation time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentListRequest.CreatedAtParam.GreaterThan">
            <summary>
            Limit to records created after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentListRequest.CreatedAtParam.GreaterThanOrEqual">
            <summary>
            Limit to records created on or after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentListRequest.CreatedAtParam.LessThan">
            <summary>
            Limit to records created before the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentListRequest.CreatedAtParam.LessThanOrEqual">
             <summary>
            Limit to records created on or before the specified date-time.
             </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentListRequest.Creditor">
            <summary>
            ID of a creditor to filter payments by. If you pass this parameter,
            you cannot also pass `customer`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentListRequest.Currency">
            <summary>
            [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217#Active_codes)
            currency code. Currently only "GBP", "EUR", and "SEK" are supported.
            </summary>
        </member>
        <member name="T:GoCardless.Services.PaymentListRequest.PaymentCurrency">
            <summary>
            [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217#Active_codes)
            currency code. Currently only "GBP", "EUR", and "SEK" are supported.
            </summary>
        </member>
        <member name="F:GoCardless.Services.PaymentListRequest.PaymentCurrency.GBP">
            <summary>`currency` with a value of "GBP"</summary>
        </member>
        <member name="F:GoCardless.Services.PaymentListRequest.PaymentCurrency.EUR">
            <summary>`currency` with a value of "EUR"</summary>
        </member>
        <member name="F:GoCardless.Services.PaymentListRequest.PaymentCurrency.SEK">
            <summary>`currency` with a value of "SEK"</summary>
        </member>
        <member name="P:GoCardless.Services.PaymentListRequest.Customer">
            <summary>
            ID of a customer to filter payments by. If you pass this parameter,
            you cannot also pass `creditor`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentListRequest.Limit">
            <summary>
            Number of records to return.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentListRequest.Mandate">
            <summary>
            Unique identifier, beginning with "MD".
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentListRequest.Status">
            <summary>
            One of:
            <ul>
            <li>`pending_customer_approval`: we're waiting for the customer to
            approve this payment</li>
            <li>`pending_submission`: the payment has been created, but not yet
            submitted to the banks</li>
            <li>`submitted`: the payment has been submitted to the banks</li>
            <li>`confirmed`: the payment has been confirmed as collected</li>
            <li>`paid_out`:  the payment has been included in a
            [payout](#core-endpoints-payouts)</li>
            <li>`cancelled`: the payment has been cancelled</li>
            <li>`customer_approval_denied`: the customer has denied approval for
            the payment. You should contact the customer directly</li>
            <li>`failed`: the payment failed to be processed. Note that payments
            can fail after being confirmed if the failure message is sent late
            by the banks.</li>
            <li>`charged_back`: the payment has been charged back</li>
            </ul>
            </summary>
        </member>
        <member name="T:GoCardless.Services.PaymentListRequest.PaymentStatus">
            <summary>
            One of:
            <ul>
            <li>`pending_customer_approval`: we're waiting for the customer to
            approve this payment</li>
            <li>`pending_submission`: the payment has been created, but not yet
            submitted to the banks</li>
            <li>`submitted`: the payment has been submitted to the banks</li>
            <li>`confirmed`: the payment has been confirmed as collected</li>
            <li>`paid_out`:  the payment has been included in a
            [payout](#core-endpoints-payouts)</li>
            <li>`cancelled`: the payment has been cancelled</li>
            <li>`customer_approval_denied`: the customer has denied approval for
            the payment. You should contact the customer directly</li>
            <li>`failed`: the payment failed to be processed. Note that payments
            can fail after being confirmed if the failure message is sent late
            by the banks.</li>
            <li>`charged_back`: the payment has been charged back</li>
            </ul>
            </summary>
        </member>
        <member name="F:GoCardless.Services.PaymentListRequest.PaymentStatus.PendingCustomerApproval">
            <summary>`status` with a value of "pending_customer_approval"</summary>
        </member>
        <member name="F:GoCardless.Services.PaymentListRequest.PaymentStatus.PendingSubmission">
            <summary>`status` with a value of "pending_submission"</summary>
        </member>
        <member name="F:GoCardless.Services.PaymentListRequest.PaymentStatus.Submitted">
            <summary>`status` with a value of "submitted"</summary>
        </member>
        <member name="F:GoCardless.Services.PaymentListRequest.PaymentStatus.Confirmed">
            <summary>`status` with a value of "confirmed"</summary>
        </member>
        <member name="F:GoCardless.Services.PaymentListRequest.PaymentStatus.PaidOut">
            <summary>`status` with a value of "paid_out"</summary>
        </member>
        <member name="F:GoCardless.Services.PaymentListRequest.PaymentStatus.Cancelled">
            <summary>`status` with a value of "cancelled"</summary>
        </member>
        <member name="F:GoCardless.Services.PaymentListRequest.PaymentStatus.CustomerApprovalDenied">
            <summary>`status` with a value of "customer_approval_denied"</summary>
        </member>
        <member name="F:GoCardless.Services.PaymentListRequest.PaymentStatus.Failed">
            <summary>`status` with a value of "failed"</summary>
        </member>
        <member name="F:GoCardless.Services.PaymentListRequest.PaymentStatus.ChargedBack">
            <summary>`status` with a value of "charged_back"</summary>
        </member>
        <member name="P:GoCardless.Services.PaymentListRequest.Subscription">
            <summary>
            Unique identifier, beginning with "SB".
            </summary>
        </member>
        <member name="T:GoCardless.Services.PaymentGetRequest">
            <summary>
            Retrieves the details of a single existing payment.
            </summary>
        </member>
        <member name="T:GoCardless.Services.PaymentUpdateRequest">
            <summary>
            Updates a payment object. This accepts only the metadata parameter.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentUpdateRequest.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="T:GoCardless.Services.PaymentCancelRequest">
            <summary>
            Cancels the payment if it has not already been submitted to the banks.
            Any metadata supplied to this endpoint will be stored on the payment
            cancellation event it causes.
            
            This will fail with a `cancellation_failed` error unless the payment's
            status is `pending_submission`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentCancelRequest.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="T:GoCardless.Services.PaymentRetryRequest">
            <summary>
            <a name="retry_failed"></a>Retries a failed payment if the underlying
            mandate is active. You will receive a `resubmission_requested` webhook,
            but after that retrying the payment follows the same process as its
            initial creation, so you will receive a `submitted` webhook, followed by
            a `confirmed` or `failed` event. Any metadata supplied to this endpoint
            will be stored against the payment submission event it causes.
            
            This will return a `retry_failed` error if the payment has not failed.
            
            Payments can be retried up to 3 times.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentRetryRequest.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="T:GoCardless.Services.PaymentResponse">
            <summary>
            An API response for a request returning a single payment.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentResponse.Payment">
            <summary>
            The payment from the response.
            </summary>
        </member>
        <member name="T:GoCardless.Services.PaymentListResponse">
            <summary>
            An API response for a request returning a list of payments.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentListResponse.Payments">
            <summary>
            The list of payments from the response.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PaymentListResponse.Meta">
            <summary>
            Response metadata (e.g. pagination cursors)
            </summary>
        </member>
        <member name="T:GoCardless.Services.PayoutService">
             <summary>
             Service class for working with payout resources.
            
             Payouts represent transfers from GoCardless to a
             [creditor](#core-endpoints-creditors). Each payout contains the funds
             collected from one or many [payments](#core-endpoints-payments). Payouts
             are created automatically after a payment has been successfully
             collected.
             </summary>
        </member>
        <member name="M:GoCardless.Services.PayoutService.#ctor(GoCardless.GoCardlessClient)">
            <summary>
            Constructor. Users of this library should not call this. An instance of this
            class can be accessed through an initialised GoCardlessClient.
            </summary>
        </member>
        <member name="M:GoCardless.Services.PayoutService.ListAsync(GoCardless.Services.PayoutListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of
            your payouts.
            </summary>
            <param name="request">An optional `PayoutListRequest` representing the query parameters for this list request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A set of payout resources</returns>
        </member>
        <member name="M:GoCardless.Services.PayoutService.All(GoCardless.Services.PayoutListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of payouts.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.PayoutService.AllAsync(GoCardless.Services.PayoutListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of payouts.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.PayoutService.GetAsync(System.String,GoCardless.Services.PayoutGetRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Retrieves the details of a single payout. For an example of how to
            reconcile the transactions in a payout, see [this
            guide](#events-reconciling-payouts-with-events).
            </summary>
            <param name="identity">Unique identifier, beginning with "PO".</param>
            <param name="request">An optional `PayoutGetRequest` representing the query parameters for this get request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single payout resource</returns>
        </member>
        <member name="T:GoCardless.Services.PayoutListRequest">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
            payouts.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PayoutListRequest.After">
            <summary>
            Cursor pointing to the start of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PayoutListRequest.Before">
            <summary>
            Cursor pointing to the end of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PayoutListRequest.CreatedAt">
            <summary>
            Limit to records created within certain times.
            </summary>
        </member>
        <member name="T:GoCardless.Services.PayoutListRequest.CreatedAtParam">
            <summary>
            Specify filters to limit records by creation time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PayoutListRequest.CreatedAtParam.GreaterThan">
            <summary>
            Limit to records created after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PayoutListRequest.CreatedAtParam.GreaterThanOrEqual">
            <summary>
            Limit to records created on or after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PayoutListRequest.CreatedAtParam.LessThan">
            <summary>
            Limit to records created before the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PayoutListRequest.CreatedAtParam.LessThanOrEqual">
             <summary>
            Limit to records created on or before the specified date-time.
             </summary>
        </member>
        <member name="P:GoCardless.Services.PayoutListRequest.Creditor">
            <summary>
            Unique identifier, beginning with "CR".
            </summary>
        </member>
        <member name="P:GoCardless.Services.PayoutListRequest.CreditorBankAccount">
            <summary>
            Unique identifier, beginning with "BA".
            </summary>
        </member>
        <member name="P:GoCardless.Services.PayoutListRequest.Currency">
            <summary>
            [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217#Active_codes)
            currency code. Currently only "GBP", "EUR", and "SEK" are supported.
            </summary>
        </member>
        <member name="T:GoCardless.Services.PayoutListRequest.PayoutCurrency">
            <summary>
            [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217#Active_codes)
            currency code. Currently only "GBP", "EUR", and "SEK" are supported.
            </summary>
        </member>
        <member name="F:GoCardless.Services.PayoutListRequest.PayoutCurrency.GBP">
            <summary>`currency` with a value of "GBP"</summary>
        </member>
        <member name="F:GoCardless.Services.PayoutListRequest.PayoutCurrency.EUR">
            <summary>`currency` with a value of "EUR"</summary>
        </member>
        <member name="F:GoCardless.Services.PayoutListRequest.PayoutCurrency.SEK">
            <summary>`currency` with a value of "SEK"</summary>
        </member>
        <member name="P:GoCardless.Services.PayoutListRequest.Limit">
            <summary>
            Number of records to return.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PayoutListRequest.PayoutType">
            <summary>
            Whether a payout contains merchant revenue or partner fees.
            </summary>
        </member>
        <member name="T:GoCardless.Services.PayoutListRequest.PayoutPayoutType">
            <summary>
            Whether a payout contains merchant revenue or partner fees.
            </summary>
        </member>
        <member name="F:GoCardless.Services.PayoutListRequest.PayoutPayoutType.Merchant">
            <summary>`payout_type` with a value of "merchant"</summary>
        </member>
        <member name="F:GoCardless.Services.PayoutListRequest.PayoutPayoutType.Partner">
            <summary>`payout_type` with a value of "partner"</summary>
        </member>
        <member name="P:GoCardless.Services.PayoutListRequest.Status">
            <summary>
            One of:
            <ul>
            <li>`pending`: the payout has been created, but not yet sent to the
            banks</li>
            <li>`paid`: the payout has been sent to the banks</li>
            </ul>
            </summary>
        </member>
        <member name="T:GoCardless.Services.PayoutListRequest.PayoutStatus">
            <summary>
            One of:
            <ul>
            <li>`pending`: the payout has been created, but not yet sent to the
            banks</li>
            <li>`paid`: the payout has been sent to the banks</li>
            </ul>
            </summary>
        </member>
        <member name="F:GoCardless.Services.PayoutListRequest.PayoutStatus.Pending">
            <summary>`status` with a value of "pending"</summary>
        </member>
        <member name="F:GoCardless.Services.PayoutListRequest.PayoutStatus.Paid">
            <summary>`status` with a value of "paid"</summary>
        </member>
        <member name="T:GoCardless.Services.PayoutGetRequest">
            <summary>
            Retrieves the details of a single payout. For an example of how to
            reconcile the transactions in a payout, see [this
            guide](#events-reconciling-payouts-with-events).
            </summary>
        </member>
        <member name="T:GoCardless.Services.PayoutResponse">
            <summary>
            An API response for a request returning a single payout.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PayoutResponse.Payout">
            <summary>
            The payout from the response.
            </summary>
        </member>
        <member name="T:GoCardless.Services.PayoutListResponse">
            <summary>
            An API response for a request returning a list of payouts.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PayoutListResponse.Payouts">
            <summary>
            The list of payouts from the response.
            </summary>
        </member>
        <member name="P:GoCardless.Services.PayoutListResponse.Meta">
            <summary>
            Response metadata (e.g. pagination cursors)
            </summary>
        </member>
        <member name="T:GoCardless.Services.RedirectFlowService">
             <summary>
             Service class for working with redirect flow resources.
            
             Redirect flows enable you to use GoCardless' [hosted payment
             pages](https://pay-sandbox.gocardless.com/AL000000AKFPFF) to set up
             mandates with your customers. These pages are fully compliant and have
             been translated into Dutch, French, German, Italian, Portuguese, Spanish
             and Swedish.
             
             The overall flow is:
             
             1. You [create](#redirect-flows-create-a-redirect-flow) a redirect flow
             for your customer, and redirect them to the returned redirect url, e.g.
             `https://pay.gocardless.com/flow/RE123`.
             
             2. Your customer supplies their name, email, address, and bank account
             details, and submits the form. This securely stores their details, and
             redirects them back to your `success_redirect_url` with
             `redirect_flow_id=RE123` in the querystring.
             
             3. You [complete](#redirect-flows-complete-a-redirect-flow) the redirect
             flow, which creates a [customer](#core-endpoints-customers), [customer
             bank account](#core-endpoints-customer-bank-accounts), and
             [mandate](#core-endpoints-mandates), and returns the ID of the mandate.
             You may wish to create a [subscription](#core-endpoints-subscriptions)
             or [payment](#core-endpoints-payments) at this point.
             
             Once you have [completed](#redirect-flows-complete-a-redirect-flow) the
             redirect flow via the API, you should display a confirmation page to
             your customer, confirming that their Direct Debit has been set up. You
             can build your own page, or redirect to the one we provide in the
             `confirmation_url` attribute of the redirect flow.
             
             Redirect flows expire 30 minutes after they are first created. You
             cannot complete an expired redirect flow.
             </summary>
        </member>
        <member name="M:GoCardless.Services.RedirectFlowService.#ctor(GoCardless.GoCardlessClient)">
            <summary>
            Constructor. Users of this library should not call this. An instance of this
            class can be accessed through an initialised GoCardlessClient.
            </summary>
        </member>
        <member name="M:GoCardless.Services.RedirectFlowService.CreateAsync(GoCardless.Services.RedirectFlowCreateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Creates a redirect flow object which can then be used to redirect
            your customer to the GoCardless hosted payment pages.
            </summary>
            <param name="request">An optional `RedirectFlowCreateRequest` representing the body for this create request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single redirect flow resource</returns>
        </member>
        <member name="M:GoCardless.Services.RedirectFlowService.GetAsync(System.String,GoCardless.Services.RedirectFlowGetRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Returns all details about a single redirect flow
            </summary>
            <param name="identity">Unique identifier, beginning with "RE".</param>
            <param name="request">An optional `RedirectFlowGetRequest` representing the query parameters for this get request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single redirect flow resource</returns>
        </member>
        <member name="M:GoCardless.Services.RedirectFlowService.CompleteAsync(System.String,GoCardless.Services.RedirectFlowCompleteRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            This creates a [customer](#core-endpoints-customers), [customer bank
            account](#core-endpoints-customer-bank-accounts), and
            [mandate](#core-endpoints-mandates) using the details supplied by
            your customer and returns the ID of the created mandate.
            
            This will return a `redirect_flow_incomplete` error if your customer
            has not yet been redirected back to your site, and a
            `redirect_flow_already_completed` error if your integration has
            already completed this flow. It will return a `bad_request` error if
            the `session_token` differs to the one supplied when the redirect
            flow was created.
            </summary>
            <param name="identity">Unique identifier, beginning with "RE".</param>
            <param name="request">An optional `RedirectFlowCompleteRequest` representing the body for this complete request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single redirect flow resource</returns>
        </member>
        <member name="T:GoCardless.Services.RedirectFlowCreateRequest">
            <summary>
            Creates a redirect flow object which can then be used to redirect your
            customer to the GoCardless hosted payment pages.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.Description">
            <summary>
            A description of the item the customer is paying for. This will be
            shown on the hosted payment pages.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.Links">
            <summary>
            Linked resources.
            </summary>
        </member>
        <member name="T:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowLinks">
            <summary>
            Linked resources for a RedirectFlow.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowLinks.Creditor">
            <summary>
            The [creditor](#core-endpoints-creditors) for whom the mandate
            will be created. The `name` of the creditor will be displayed on
            the payment page. Required if your account manages multiple
            creditors.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.PrefilledCustomer">
            <summary>
            Information used to prefill the payment page so your customer
            doesn't have to re-type details you already hold about them. It will
            be stored unvalidated and the customer will be able to review and
            amend it before completing the form.
            </summary>
        </member>
        <member name="T:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowPrefilledCustomer">
            <summary>
            Information used to prefill the payment page so your customer
            doesn't have to re-type details you already hold about them. It will
            be stored unvalidated and the customer will be able to review and
            amend it before completing the form.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowPrefilledCustomer.AddressLine1">
            <summary>
            The first line of the customer's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowPrefilledCustomer.AddressLine2">
            <summary>
            The second line of the customer's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowPrefilledCustomer.AddressLine3">
            <summary>
            The third line of the customer's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowPrefilledCustomer.City">
            <summary>
            The city of the customer's address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowPrefilledCustomer.CompanyName">
            <summary>
            Customer's company name.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowPrefilledCustomer.CountryCode">
            <summary>
            [ISO
            3166-1](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)
            alpha-2 code.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowPrefilledCustomer.Email">
            <summary>
            Customer's email address.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowPrefilledCustomer.FamilyName">
            <summary>
            Customer's surname.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowPrefilledCustomer.GivenName">
            <summary>
            Customer's first name.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowPrefilledCustomer.Language">
            <summary>
            [ISO
            639-1](http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
            code.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowPrefilledCustomer.PostalCode">
            <summary>
            The customer's postal code.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowPrefilledCustomer.Region">
            <summary>
            The customer's address region, county or department.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowPrefilledCustomer.SwedishIdentityNumber">
            <summary>
            For Swedish customers only. The civic/company number
            (personnummer, samordningsnummer, or organisationsnummer) of the
            customer.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.Scheme">
            <summary>
            The Direct Debit scheme of the mandate. If specified, the payment
            pages will only allow the set-up of a mandate for the specified
            scheme. It is recommended that you leave this blank so the most
            appropriate scheme is picked based on the customer's bank account.
            </summary>
        </member>
        <member name="T:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowScheme">
            <summary>
            The Direct Debit scheme of the mandate. If specified, the payment
            pages will only allow the set-up of a mandate for the specified
            scheme. It is recommended that you leave this blank so the most
            appropriate scheme is picked based on the customer's bank account.
            </summary>
        </member>
        <member name="F:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowScheme.Autogiro">
            <summary>`scheme` with a value of "autogiro"</summary>
        </member>
        <member name="F:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowScheme.Bacs">
            <summary>`scheme` with a value of "bacs"</summary>
        </member>
        <member name="F:GoCardless.Services.RedirectFlowCreateRequest.RedirectFlowScheme.SepaCore">
            <summary>`scheme` with a value of "sepa_core"</summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.SessionToken">
            <summary>
            The customer's session ID must be provided when the redirect flow is
            set up and again when it is completed. This allows integrators to
            ensure that the user who was originally sent to the GoCardless
            payment pages is the one who has completed them.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.SuccessRedirectUrl">
            <summary>
            The URL to redirect to upon successful mandate setup. You must use a
            URL beginning `https` in the live environment.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCreateRequest.IdempotencyKey">
            <summary>
            A unique key to ensure that this request only succeeds once, allowing you to safely retry request errors such as network failures.
            Any requests, where supported, to create a resource with a key that has previously been used will not succeed.
            See: https://developer.gocardless.com/api-reference/#making-requests-idempotency-keys
            </summary>
        </member>
        <member name="T:GoCardless.Services.RedirectFlowGetRequest">
            <summary>
            Returns all details about a single redirect flow
            </summary>
        </member>
        <member name="T:GoCardless.Services.RedirectFlowCompleteRequest">
            <summary>
            This creates a [customer](#core-endpoints-customers), [customer bank
            account](#core-endpoints-customer-bank-accounts), and
            [mandate](#core-endpoints-mandates) using the details supplied by your
            customer and returns the ID of the created mandate.
            
            This will return a `redirect_flow_incomplete` error if your customer has
            not yet been redirected back to your site, and a
            `redirect_flow_already_completed` error if your integration has already
            completed this flow. It will return a `bad_request` error if the
            `session_token` differs to the one supplied when the redirect flow was
            created.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowCompleteRequest.SessionToken">
            <summary>
            The customer's session ID must be provided when the redirect flow is
            set up and again when it is completed. This allows integrators to
            ensure that the user who was originally sent to the GoCardless
            payment pages is the one who has completed them.
            </summary>
        </member>
        <member name="T:GoCardless.Services.RedirectFlowResponse">
            <summary>
            An API response for a request returning a single redirect flow.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RedirectFlowResponse.RedirectFlow">
            <summary>
            The redirect flow from the response.
            </summary>
        </member>
        <member name="T:GoCardless.Services.RefundService">
             <summary>
             Service class for working with refund resources.
            
             Refund objects represent (partial) refunds of a
             [payment](#core-endpoints-payments) back to the
             [customer](#core-endpoints-customers).
             
             GoCardless will notify you via a [webhook](#appendix-webhooks) whenever
             a refund is created, and will update the `amount_refunded` property of
             the payment.
             </summary>
        </member>
        <member name="M:GoCardless.Services.RefundService.#ctor(GoCardless.GoCardlessClient)">
            <summary>
            Constructor. Users of this library should not call this. An instance of this
            class can be accessed through an initialised GoCardlessClient.
            </summary>
        </member>
        <member name="M:GoCardless.Services.RefundService.CreateAsync(GoCardless.Services.RefundCreateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Creates a new refund object.
            
            This fails with:<a name="refund_payment_invalid_state"></a><a
            name="total_amount_confirmation_invalid"></a><a
            name="number_of_refunds_exceeded"></a>
            
            - `refund_payment_invalid_state` error if the linked
            [payment](#core-endpoints-payments) isn't either `confirmed` or
            `paid_out`.
            
            - `total_amount_confirmation_invalid` if the confirmation amount
            doesn't match the total amount refunded for the payment. This
            safeguard is there to prevent two processes from creating refunds
            without awareness of each other.
            
            - `number_of_refunds_exceeded` if five or more refunds have already
            been created against the payment.
            
            </summary>
            <param name="request">An optional `RefundCreateRequest` representing the body for this create request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single refund resource</returns>
        </member>
        <member name="M:GoCardless.Services.RefundService.ListAsync(GoCardless.Services.RefundListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of
            your refunds.
            </summary>
            <param name="request">An optional `RefundListRequest` representing the query parameters for this list request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A set of refund resources</returns>
        </member>
        <member name="M:GoCardless.Services.RefundService.All(GoCardless.Services.RefundListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of refunds.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.RefundService.AllAsync(GoCardless.Services.RefundListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of refunds.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.RefundService.GetAsync(System.String,GoCardless.Services.RefundGetRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Retrieves all details for a single refund
            </summary>
            <param name="identity">Unique identifier, beginning with "RF".</param>
            <param name="request">An optional `RefundGetRequest` representing the query parameters for this get request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single refund resource</returns>
        </member>
        <member name="M:GoCardless.Services.RefundService.UpdateAsync(System.String,GoCardless.Services.RefundUpdateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Updates a refund object.
            </summary>
            <param name="identity">Unique identifier, beginning with "RF".</param>
            <param name="request">An optional `RefundUpdateRequest` representing the body for this update request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single refund resource</returns>
        </member>
        <member name="T:GoCardless.Services.RefundCreateRequest">
            <summary>
            Creates a new refund object.
            
            This fails with:<a name="refund_payment_invalid_state"></a><a
            name="total_amount_confirmation_invalid"></a><a
            name="number_of_refunds_exceeded"></a>
            
            - `refund_payment_invalid_state` error if the linked
            [payment](#core-endpoints-payments) isn't either `confirmed` or
            `paid_out`.
            
            - `total_amount_confirmation_invalid` if the confirmation amount doesn't
            match the total amount refunded for the payment. This safeguard is there
            to prevent two processes from creating refunds without awareness of each
            other.
            
            - `number_of_refunds_exceeded` if five or more refunds have already been
            created against the payment.
            
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundCreateRequest.Amount">
            <summary>
            Amount in pence/cents/öre.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundCreateRequest.Links">
            <summary>
            Linked resources.
            </summary>
        </member>
        <member name="T:GoCardless.Services.RefundCreateRequest.RefundLinks">
            <summary>
            Linked resources for a Refund.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundCreateRequest.RefundLinks.Payment">
            <summary>
            ID of the [payment](#core-endpoints-payments) against which the
            refund is being made.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundCreateRequest.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundCreateRequest.Reference">
            <summary>
            An optional refund reference, displayed on your customer's bank
            statement. This can be up to 18 characters long for Bacs payments,
            140 characters for SEPA payments, or 25 characters for Autogiro
            payments.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundCreateRequest.TotalAmountConfirmation">
            <summary>
            Total expected refunded amount in pence/cents/öre. If there are
            other partial refunds against this payment, this value should be the
            sum of the existing refunds plus the amount of the refund being
            created.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundCreateRequest.IdempotencyKey">
            <summary>
            A unique key to ensure that this request only succeeds once, allowing you to safely retry request errors such as network failures.
            Any requests, where supported, to create a resource with a key that has previously been used will not succeed.
            See: https://developer.gocardless.com/api-reference/#making-requests-idempotency-keys
            </summary>
        </member>
        <member name="T:GoCardless.Services.RefundListRequest">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
            refunds.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundListRequest.After">
            <summary>
            Cursor pointing to the start of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundListRequest.Before">
            <summary>
            Cursor pointing to the end of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundListRequest.CreatedAt">
            <summary>
            Limit to records created within certain times.
            </summary>
        </member>
        <member name="T:GoCardless.Services.RefundListRequest.CreatedAtParam">
            <summary>
            Specify filters to limit records by creation time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundListRequest.CreatedAtParam.GreaterThan">
            <summary>
            Limit to records created after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundListRequest.CreatedAtParam.GreaterThanOrEqual">
            <summary>
            Limit to records created on or after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundListRequest.CreatedAtParam.LessThan">
            <summary>
            Limit to records created before the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundListRequest.CreatedAtParam.LessThanOrEqual">
             <summary>
            Limit to records created on or before the specified date-time.
             </summary>
        </member>
        <member name="P:GoCardless.Services.RefundListRequest.Limit">
            <summary>
            Number of records to return.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundListRequest.Payment">
            <summary>
            Unique identifier, beginning with "PM".
            </summary>
        </member>
        <member name="T:GoCardless.Services.RefundGetRequest">
            <summary>
            Retrieves all details for a single refund
            </summary>
        </member>
        <member name="T:GoCardless.Services.RefundUpdateRequest">
            <summary>
            Updates a refund object.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundUpdateRequest.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="T:GoCardless.Services.RefundResponse">
            <summary>
            An API response for a request returning a single refund.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundResponse.Refund">
            <summary>
            The refund from the response.
            </summary>
        </member>
        <member name="T:GoCardless.Services.RefundListResponse">
            <summary>
            An API response for a request returning a list of refunds.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundListResponse.Refunds">
            <summary>
            The list of refunds from the response.
            </summary>
        </member>
        <member name="P:GoCardless.Services.RefundListResponse.Meta">
            <summary>
            Response metadata (e.g. pagination cursors)
            </summary>
        </member>
        <member name="T:GoCardless.Services.SubscriptionService">
             <summary>
             Service class for working with subscription resources.
            
             Subscriptions create [payments](#core-endpoints-payments) according to a
             schedule.
             
             ### Recurrence Rules
             
             The following rules apply when specifying recurrence:
             
             - The first payment must be charged within 1 year.
             - When neither `month` nor `day_of_month` are present, the subscription
             will recur from the `start_date` based on the `interval_unit`.
             - If `month` or `day_of_month` are present, the recurrence rules will be
             applied from the `start_date`, and the following validations apply:
             
             | interval_unit   | month                                          |
             day_of_month                            |
             | :-------------- | :--------------------------------------------- |
             :-------------------------------------- |
             | yearly          | optional (required if `day_of_month` provided) |
             optional (required if `month` provided) |
             | monthly         | invalid                                        |
             required                                |
             | weekly          | invalid                                        |
             invalid                                 |
             
             Examples:
             
             | interval_unit   | interval   | month   | day_of_month   | valid?      
                                                   |
             | :-------------- | :--------- | :------ | :------------- |
             :------------------------------------------------- |
             | yearly          | 1          | january | -1             | valid       
                                                   |
             | yearly          | 1          | march   |                | invalid -
             missing `day_of_month`                   |
             | monthly         | 6          |         | 12             | valid       
                                                   |
             | monthly         | 6          | august  | 12             | invalid -
             `month` must be blank                    |
             | weekly          | 2          |         |                | valid       
                                                   |
             | weekly          | 2          | october | 10             | invalid -
             `month` and `day_of_month` must be blank |
             
             ### Rolling dates
             
             When a charge date falls on a non-business day, one of two things will
             happen:
             
             - if the recurrence rule specified `-1` as the `day_of_month`, the
             charge date will be rolled __backwards__ to the previous business day
             (i.e., the last working day of the month).
             - otherwise the charge date will be rolled __forwards__ to the next
             business day.
             
             </summary>
        </member>
        <member name="M:GoCardless.Services.SubscriptionService.#ctor(GoCardless.GoCardlessClient)">
            <summary>
            Constructor. Users of this library should not call this. An instance of this
            class can be accessed through an initialised GoCardlessClient.
            </summary>
        </member>
        <member name="M:GoCardless.Services.SubscriptionService.CreateAsync(GoCardless.Services.SubscriptionCreateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Creates a new subscription object
            </summary>
            <param name="request">An optional `SubscriptionCreateRequest` representing the body for this create request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single subscription resource</returns>
        </member>
        <member name="M:GoCardless.Services.SubscriptionService.ListAsync(GoCardless.Services.SubscriptionListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of
            your subscriptions.
            </summary>
            <param name="request">An optional `SubscriptionListRequest` representing the query parameters for this list request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A set of subscription resources</returns>
        </member>
        <member name="M:GoCardless.Services.SubscriptionService.All(GoCardless.Services.SubscriptionListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of subscriptions.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.SubscriptionService.AllAsync(GoCardless.Services.SubscriptionListRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Get a lazily enumerated list of subscriptions.
            This acts like the #list method, but paginates for you automatically.
            </summary>
        </member>
        <member name="M:GoCardless.Services.SubscriptionService.GetAsync(System.String,GoCardless.Services.SubscriptionGetRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Retrieves the details of a single subscription.
            </summary>
            <param name="identity">Unique identifier, beginning with "SB".</param>
            <param name="request">An optional `SubscriptionGetRequest` representing the query parameters for this get request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single subscription resource</returns>
        </member>
        <member name="M:GoCardless.Services.SubscriptionService.UpdateAsync(System.String,GoCardless.Services.SubscriptionUpdateRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Updates a subscription object.
            
            This fails with:
            
            - `subscription_not_active` if the subscription is no longer active.
            
            - `subscription_already_ended` if the subscription has taken all
            payments.
            
            - `mandate_payments_require_approval` if the amount is being changed
            and the mandate requires approval.
            
            - `exceeded_max_amendments` error if the amount is being changed and
            the
              subscription amount has already been changed 10 times.
            
            </summary>
            <param name="identity">Unique identifier, beginning with "SB".</param>
            <param name="request">An optional `SubscriptionUpdateRequest` representing the body for this update request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single subscription resource</returns>
        </member>
        <member name="M:GoCardless.Services.SubscriptionService.CancelAsync(System.String,GoCardless.Services.SubscriptionCancelRequest,GoCardless.Internals.RequestSettings)">
            <summary>
            Immediately cancels a subscription; no more payments will be created
            under it. Any metadata supplied to this endpoint will be stored on
            the payment cancellation event it causes.
            
            This will fail with a cancellation_failed error if the subscription
            is already cancelled or finished.
            </summary>
            <param name="identity">Unique identifier, beginning with "SB".</param>
            <param name="request">An optional `SubscriptionCancelRequest` representing the body for this cancel request.</param>
            <param name="customiseRequestMessage">An optional `RequestSettings` allowing you to configure the request</param>
            <returns>A single subscription resource</returns>
        </member>
        <member name="T:GoCardless.Services.SubscriptionCreateRequest">
            <summary>
            Creates a new subscription object
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionCreateRequest.Amount">
            <summary>
            Amount in pence (GBP), cents (EUR), or öre (SEK).
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionCreateRequest.AppFee">
            <summary>
            The amount to be deducted from the payment as the OAuth app's fee,
            in pence (GBP), cents (EUR), or öre (SEK).
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionCreateRequest.Count">
            <summary>
            The total number of payments that should be taken by this
            subscription.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionCreateRequest.Currency">
            <summary>
            [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.
            Currently only `GBP`, `EUR`, and `SEK` are supported.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionCreateRequest.DayOfMonth">
            <summary>
            As per RFC 2445. The day of the month to charge customers on.
            `1`-`28` or `-1` to indicate the last day of the month.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionCreateRequest.EndDate">
            <summary>
            Date on or after which no further payments should be created. If
            this field is blank and `count` is not specified, the subscription
            will continue forever. <p
            class='deprecated-notice'><strong>Deprecated</strong>: This field
            will be removed in a future API version. Use `count` to specify a
            number of payments instead. </p>
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionCreateRequest.Interval">
            <summary>
            Number of `interval_units` between customer charge dates. Must
            result in at least one charge date per year. Defaults to `1`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionCreateRequest.IntervalUnit">
            <summary>
            The unit of time between customer charge dates. One of `weekly`,
            `monthly` or `yearly`.
            </summary>
        </member>
        <member name="T:GoCardless.Services.SubscriptionCreateRequest.SubscriptionIntervalUnit">
            <summary>
            The unit of time between customer charge dates. One of `weekly`,
            `monthly` or `yearly`.
            </summary>
        </member>
        <member name="F:GoCardless.Services.SubscriptionCreateRequest.SubscriptionIntervalUnit.Weekly">
            <summary>`interval_unit` with a value of "weekly"</summary>
        </member>
        <member name="F:GoCardless.Services.SubscriptionCreateRequest.SubscriptionIntervalUnit.Monthly">
            <summary>`interval_unit` with a value of "monthly"</summary>
        </member>
        <member name="F:GoCardless.Services.SubscriptionCreateRequest.SubscriptionIntervalUnit.Yearly">
            <summary>`interval_unit` with a value of "yearly"</summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionCreateRequest.Links">
            <summary>
            Linked resources.
            </summary>
        </member>
        <member name="T:GoCardless.Services.SubscriptionCreateRequest.SubscriptionLinks">
            <summary>
            Linked resources for a Subscription.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionCreateRequest.SubscriptionLinks.Mandate">
            <summary>
            ID of the associated [mandate](#core-endpoints-mandates) which
            the subscription will create payments against.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionCreateRequest.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionCreateRequest.Month">
            <summary>
            Name of the month on which to charge a customer. Must be lowercase.
            </summary>
        </member>
        <member name="T:GoCardless.Services.SubscriptionCreateRequest.SubscriptionMonth">
            <summary>
            Name of the month on which to charge a customer. Must be lowercase.
            </summary>
        </member>
        <member name="F:GoCardless.Services.SubscriptionCreateRequest.SubscriptionMonth.January">
            <summary>`month` with a value of "january"</summary>
        </member>
        <member name="F:GoCardless.Services.SubscriptionCreateRequest.SubscriptionMonth.February">
            <summary>`month` with a value of "february"</summary>
        </member>
        <member name="F:GoCardless.Services.SubscriptionCreateRequest.SubscriptionMonth.March">
            <summary>`month` with a value of "march"</summary>
        </member>
        <member name="F:GoCardless.Services.SubscriptionCreateRequest.SubscriptionMonth.April">
            <summary>`month` with a value of "april"</summary>
        </member>
        <member name="F:GoCardless.Services.SubscriptionCreateRequest.SubscriptionMonth.May">
            <summary>`month` with a value of "may"</summary>
        </member>
        <member name="F:GoCardless.Services.SubscriptionCreateRequest.SubscriptionMonth.June">
            <summary>`month` with a value of "june"</summary>
        </member>
        <member name="F:GoCardless.Services.SubscriptionCreateRequest.SubscriptionMonth.July">
            <summary>`month` with a value of "july"</summary>
        </member>
        <member name="F:GoCardless.Services.SubscriptionCreateRequest.SubscriptionMonth.August">
            <summary>`month` with a value of "august"</summary>
        </member>
        <member name="F:GoCardless.Services.SubscriptionCreateRequest.SubscriptionMonth.September">
            <summary>`month` with a value of "september"</summary>
        </member>
        <member name="F:GoCardless.Services.SubscriptionCreateRequest.SubscriptionMonth.October">
            <summary>`month` with a value of "october"</summary>
        </member>
        <member name="F:GoCardless.Services.SubscriptionCreateRequest.SubscriptionMonth.November">
            <summary>`month` with a value of "november"</summary>
        </member>
        <member name="F:GoCardless.Services.SubscriptionCreateRequest.SubscriptionMonth.December">
            <summary>`month` with a value of "december"</summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionCreateRequest.Name">
            <summary>
            Optional name for the subscription. This will be set as the
            description on each payment created. Must not exceed 255 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionCreateRequest.PaymentReference">
            <summary>
            An optional payment reference. This will be set as the reference on
            each payment created and will appear on your customer's bank
            statement. See the documentation for the [create payment
            endpoint](#payments-create-a-payment) for more details. <p
            class='restricted-notice'><strong>Restricted</strong>: You need your
            own Service User Number to specify a payment reference for Bacs
            payments.</p>
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionCreateRequest.StartDate">
            <summary>
            The date on which the first payment should be charged. Must be
            within one year of creation and on or after the
            [mandate](#core-endpoints-mandates)'s `next_possible_charge_date`.
            When blank, this will be set as the mandate's
            `next_possible_charge_date`.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionCreateRequest.IdempotencyKey">
            <summary>
            A unique key to ensure that this request only succeeds once, allowing you to safely retry request errors such as network failures.
            Any requests, where supported, to create a resource with a key that has previously been used will not succeed.
            See: https://developer.gocardless.com/api-reference/#making-requests-idempotency-keys
            </summary>
        </member>
        <member name="T:GoCardless.Services.SubscriptionListRequest">
            <summary>
            Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
            subscriptions.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionListRequest.After">
            <summary>
            Cursor pointing to the start of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionListRequest.Before">
            <summary>
            Cursor pointing to the end of the desired set.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionListRequest.CreatedAt">
            <summary>
            Limit to records created within certain times.
            </summary>
        </member>
        <member name="T:GoCardless.Services.SubscriptionListRequest.CreatedAtParam">
            <summary>
            Specify filters to limit records by creation time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionListRequest.CreatedAtParam.GreaterThan">
            <summary>
            Limit to records created after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionListRequest.CreatedAtParam.GreaterThanOrEqual">
            <summary>
            Limit to records created on or after the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionListRequest.CreatedAtParam.LessThan">
            <summary>
            Limit to records created before the specified date-time.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionListRequest.CreatedAtParam.LessThanOrEqual">
             <summary>
            Limit to records created on or before the specified date-time.
             </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionListRequest.Customer">
            <summary>
            Unique identifier, beginning with "CU".
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionListRequest.Limit">
            <summary>
            Number of records to return.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionListRequest.Mandate">
            <summary>
            Unique identifier, beginning with "MD".
            </summary>
        </member>
        <member name="T:GoCardless.Services.SubscriptionGetRequest">
            <summary>
            Retrieves the details of a single subscription.
            </summary>
        </member>
        <member name="T:GoCardless.Services.SubscriptionUpdateRequest">
            <summary>
            Updates a subscription object.
            
            This fails with:
            
            - `subscription_not_active` if the subscription is no longer active.
            
            - `subscription_already_ended` if the subscription has taken all
            payments.
            
            - `mandate_payments_require_approval` if the amount is being changed and
            the mandate requires approval.
            
            - `exceeded_max_amendments` error if the amount is being changed and the
              subscription amount has already been changed 10 times.
            
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionUpdateRequest.Amount">
            <summary>
            Amount in pence (GBP), cents (EUR), or öre (SEK).
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionUpdateRequest.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionUpdateRequest.Name">
            <summary>
            Optional name for the subscription. This will be set as the
            description on each payment created. Must not exceed 255 characters.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionUpdateRequest.PaymentReference">
            <summary>
            An optional payment reference. This will be set as the reference on
            each payment created and will appear on your customer's bank
            statement. See the documentation for the [create payment
            endpoint](#payments-create-a-payment) for more details. <p
            class='restricted-notice'><strong>Restricted</strong>: You need your
            own Service User Number to specify a payment reference for Bacs
            payments.</p>
            </summary>
        </member>
        <member name="T:GoCardless.Services.SubscriptionCancelRequest">
            <summary>
            Immediately cancels a subscription; no more payments will be created
            under it. Any metadata supplied to this endpoint will be stored on the
            payment cancellation event it causes.
            
            This will fail with a cancellation_failed error if the subscription is
            already cancelled or finished.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionCancelRequest.Metadata">
            <summary>
            Key-value store of custom data. Up to 3 keys are permitted, with key
            names up to 50 characters and values up to 500 characters.
            </summary>
        </member>
        <member name="T:GoCardless.Services.SubscriptionResponse">
            <summary>
            An API response for a request returning a single subscription.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionResponse.Subscription">
            <summary>
            The subscription from the response.
            </summary>
        </member>
        <member name="T:GoCardless.Services.SubscriptionListResponse">
            <summary>
            An API response for a request returning a list of subscriptions.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionListResponse.Subscriptions">
            <summary>
            The list of subscriptions from the response.
            </summary>
        </member>
        <member name="P:GoCardless.Services.SubscriptionListResponse.Meta">
            <summary>
            Response metadata (e.g. pagination cursors)
            </summary>
        </member>
    </members>
</doc>
